
autonomousVehicle_GTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be4  08003be4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bec  08003bec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000492c  20000010  08003c04  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000493c  08003c04  0002493c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed41  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f0b  00000000  00000000  0002ed81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  00030c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000978  00000000  00000000  000316f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020a8b  00000000  00000000  00032068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009dc4  00000000  00000000  00052af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7a67  00000000  00000000  0005c8b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012431e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002960  00000000  00000000  0012439c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b98 	.word	0x08003b98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003b98 	.word	0x08003b98

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f90d 	bl	8000718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	200f      	movs	r0, #15
 8000500:	f000 f808 	bl	8000514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f003 fa64 	bl	80039d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_InitTick+0x54>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_InitTick+0x58>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052a:	fbb3 f3f1 	udiv	r3, r3, r1
 800052e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f917 	bl	8000766 <HAL_SYSTICK_Config>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	e00e      	b.n	8000560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0f      	cmp	r3, #15
 8000546:	d80a      	bhi.n	800055e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000548:	2200      	movs	r2, #0
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	f04f 30ff 	mov.w	r0, #4294967295
 8000550:	f000 f8ed 	bl	800072e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <HAL_InitTick+0x5c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055a:	2300      	movs	r3, #0
 800055c:	e000      	b.n	8000560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000000c 	.word	0x2000000c
 800056c:	20000004 	.word	0x20000004
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x20>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x24>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_IncTick+0x24>)
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000004 	.word	0x20000004
 8000598:	200048f8 	.word	0x200048f8

0800059c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return uwTick;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <HAL_GetTick+0x14>)
 80005a2:	681b      	ldr	r3, [r3, #0]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	200048f8 	.word	0x200048f8

080005b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f003 0307 	and.w	r3, r3, #7
 80005c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <__NVIC_SetPriorityGrouping+0x44>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d0:	4013      	ands	r3, r2
 80005d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <__NVIC_SetPriorityGrouping+0x44>)
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	60d3      	str	r3, [r2, #12]
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <__NVIC_GetPriorityGrouping+0x18>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	f003 0307 	and.w	r3, r3, #7
}
 800060a:	4618      	mov	r0, r3
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	6039      	str	r1, [r7, #0]
 8000622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000628:	2b00      	cmp	r3, #0
 800062a:	db0a      	blt.n	8000642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	b2da      	uxtb	r2, r3
 8000630:	490c      	ldr	r1, [pc, #48]	; (8000664 <__NVIC_SetPriority+0x4c>)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	0112      	lsls	r2, r2, #4
 8000638:	b2d2      	uxtb	r2, r2
 800063a:	440b      	add	r3, r1
 800063c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000640:	e00a      	b.n	8000658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4908      	ldr	r1, [pc, #32]	; (8000668 <__NVIC_SetPriority+0x50>)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	f003 030f 	and.w	r3, r3, #15
 800064e:	3b04      	subs	r3, #4
 8000650:	0112      	lsls	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	440b      	add	r3, r1
 8000656:	761a      	strb	r2, [r3, #24]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000e100 	.word	0xe000e100
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800066c:	b480      	push	{r7}
 800066e:	b089      	sub	sp, #36	; 0x24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	f1c3 0307 	rsb	r3, r3, #7
 8000686:	2b04      	cmp	r3, #4
 8000688:	bf28      	it	cs
 800068a:	2304      	movcs	r3, #4
 800068c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3304      	adds	r3, #4
 8000692:	2b06      	cmp	r3, #6
 8000694:	d902      	bls.n	800069c <NVIC_EncodePriority+0x30>
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	3b03      	subs	r3, #3
 800069a:	e000      	b.n	800069e <NVIC_EncodePriority+0x32>
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	f04f 32ff 	mov.w	r2, #4294967295
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	43da      	mvns	r2, r3
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	401a      	ands	r2, r3
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b4:	f04f 31ff 	mov.w	r1, #4294967295
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	43d9      	mvns	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	4313      	orrs	r3, r2
         );
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3724      	adds	r7, #36	; 0x24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3b01      	subs	r3, #1
 80006e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006e4:	d301      	bcc.n	80006ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00f      	b.n	800070a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <SysTick_Config+0x40>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006f2:	210f      	movs	r1, #15
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f7ff ff8e 	bl	8000618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <SysTick_Config+0x40>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	4b04      	ldr	r3, [pc, #16]	; (8000714 <SysTick_Config+0x40>)
 8000704:	2207      	movs	r2, #7
 8000706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	e000e010 	.word	0xe000e010

08000718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ff47 	bl	80005b4 <__NVIC_SetPriorityGrouping>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800072e:	b580      	push	{r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	60b9      	str	r1, [r7, #8]
 8000738:	607a      	str	r2, [r7, #4]
 800073a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000740:	f7ff ff5c 	bl	80005fc <__NVIC_GetPriorityGrouping>
 8000744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	68b9      	ldr	r1, [r7, #8]
 800074a:	6978      	ldr	r0, [r7, #20]
 800074c:	f7ff ff8e 	bl	800066c <NVIC_EncodePriority>
 8000750:	4602      	mov	r2, r0
 8000752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000756:	4611      	mov	r1, r2
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff5d 	bl	8000618 <__NVIC_SetPriority>
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ffb0 	bl	80006d4 <SysTick_Config>
 8000774:	4603      	mov	r3, r0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d101      	bne.n	8000792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	e22d      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d075      	beq.n	800088a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800079e:	4ba3      	ldr	r3, [pc, #652]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	f003 030c 	and.w	r3, r3, #12
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d00c      	beq.n	80007c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007aa:	4ba0      	ldr	r3, [pc, #640]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007b2:	2b08      	cmp	r3, #8
 80007b4:	d112      	bne.n	80007dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007b6:	4b9d      	ldr	r3, [pc, #628]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80007c2:	d10b      	bne.n	80007dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007c4:	4b99      	ldr	r3, [pc, #612]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d05b      	beq.n	8000888 <HAL_RCC_OscConfig+0x108>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d157      	bne.n	8000888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	e208      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007e4:	d106      	bne.n	80007f4 <HAL_RCC_OscConfig+0x74>
 80007e6:	4b91      	ldr	r3, [pc, #580]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a90      	ldr	r2, [pc, #576]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80007ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	e01d      	b.n	8000830 <HAL_RCC_OscConfig+0xb0>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007fc:	d10c      	bne.n	8000818 <HAL_RCC_OscConfig+0x98>
 80007fe:	4b8b      	ldr	r3, [pc, #556]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a8a      	ldr	r2, [pc, #552]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 8000804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	4b88      	ldr	r3, [pc, #544]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a87      	ldr	r2, [pc, #540]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 8000810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	e00b      	b.n	8000830 <HAL_RCC_OscConfig+0xb0>
 8000818:	4b84      	ldr	r3, [pc, #528]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a83      	ldr	r2, [pc, #524]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 800081e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b81      	ldr	r3, [pc, #516]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a80      	ldr	r2, [pc, #512]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 800082a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800082e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d013      	beq.n	8000860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000838:	f7ff feb0 	bl	800059c <HAL_GetTick>
 800083c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800083e:	e008      	b.n	8000852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000840:	f7ff feac 	bl	800059c <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	2b64      	cmp	r3, #100	; 0x64
 800084c:	d901      	bls.n	8000852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800084e:	2303      	movs	r3, #3
 8000850:	e1cd      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000852:	4b76      	ldr	r3, [pc, #472]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f0      	beq.n	8000840 <HAL_RCC_OscConfig+0xc0>
 800085e:	e014      	b.n	800088a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000860:	f7ff fe9c 	bl	800059c <HAL_GetTick>
 8000864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000866:	e008      	b.n	800087a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000868:	f7ff fe98 	bl	800059c <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	2b64      	cmp	r3, #100	; 0x64
 8000874:	d901      	bls.n	800087a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000876:	2303      	movs	r3, #3
 8000878:	e1b9      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800087a:	4b6c      	ldr	r3, [pc, #432]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1f0      	bne.n	8000868 <HAL_RCC_OscConfig+0xe8>
 8000886:	e000      	b.n	800088a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	2b00      	cmp	r3, #0
 8000894:	d063      	beq.n	800095e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000896:	4b65      	ldr	r3, [pc, #404]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	f003 030c 	and.w	r3, r3, #12
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00b      	beq.n	80008ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008a2:	4b62      	ldr	r3, [pc, #392]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008aa:	2b08      	cmp	r3, #8
 80008ac:	d11c      	bne.n	80008e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ae:	4b5f      	ldr	r3, [pc, #380]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d116      	bne.n	80008e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ba:	4b5c      	ldr	r3, [pc, #368]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d005      	beq.n	80008d2 <HAL_RCC_OscConfig+0x152>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d001      	beq.n	80008d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e18d      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d2:	4b56      	ldr	r3, [pc, #344]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	691b      	ldr	r3, [r3, #16]
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	4952      	ldr	r1, [pc, #328]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80008e2:	4313      	orrs	r3, r2
 80008e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e6:	e03a      	b.n	800095e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d020      	beq.n	8000932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008f0:	4b4f      	ldr	r3, [pc, #316]	; (8000a30 <HAL_RCC_OscConfig+0x2b0>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008f6:	f7ff fe51 	bl	800059c <HAL_GetTick>
 80008fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008fc:	e008      	b.n	8000910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008fe:	f7ff fe4d 	bl	800059c <HAL_GetTick>
 8000902:	4602      	mov	r2, r0
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	2b02      	cmp	r3, #2
 800090a:	d901      	bls.n	8000910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800090c:	2303      	movs	r3, #3
 800090e:	e16e      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000910:	4b46      	ldr	r3, [pc, #280]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f0      	beq.n	80008fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800091c:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	691b      	ldr	r3, [r3, #16]
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	4940      	ldr	r1, [pc, #256]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 800092c:	4313      	orrs	r3, r2
 800092e:	600b      	str	r3, [r1, #0]
 8000930:	e015      	b.n	800095e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000932:	4b3f      	ldr	r3, [pc, #252]	; (8000a30 <HAL_RCC_OscConfig+0x2b0>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000938:	f7ff fe30 	bl	800059c <HAL_GetTick>
 800093c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800093e:	e008      	b.n	8000952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000940:	f7ff fe2c 	bl	800059c <HAL_GetTick>
 8000944:	4602      	mov	r2, r0
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	2b02      	cmp	r3, #2
 800094c:	d901      	bls.n	8000952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800094e:	2303      	movs	r3, #3
 8000950:	e14d      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000952:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1f0      	bne.n	8000940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	2b00      	cmp	r3, #0
 8000968:	d030      	beq.n	80009cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d016      	beq.n	80009a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000972:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <HAL_RCC_OscConfig+0x2b4>)
 8000974:	2201      	movs	r2, #1
 8000976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000978:	f7ff fe10 	bl	800059c <HAL_GetTick>
 800097c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097e:	e008      	b.n	8000992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000980:	f7ff fe0c 	bl	800059c <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	2b02      	cmp	r3, #2
 800098c:	d901      	bls.n	8000992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800098e:	2303      	movs	r3, #3
 8000990:	e12d      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 8000994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0f0      	beq.n	8000980 <HAL_RCC_OscConfig+0x200>
 800099e:	e015      	b.n	80009cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009a0:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <HAL_RCC_OscConfig+0x2b4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a6:	f7ff fdf9 	bl	800059c <HAL_GetTick>
 80009aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ac:	e008      	b.n	80009c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ae:	f7ff fdf5 	bl	800059c <HAL_GetTick>
 80009b2:	4602      	mov	r2, r0
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d901      	bls.n	80009c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80009bc:	2303      	movs	r3, #3
 80009be:	e116      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80009c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f0      	bne.n	80009ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f000 80a0 	beq.w	8000b1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10f      	bne.n	8000a0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_RCC_OscConfig+0x2ac>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a06:	2301      	movs	r3, #1
 8000a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_RCC_OscConfig+0x2b8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d121      	bne.n	8000a5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_RCC_OscConfig+0x2b8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_RCC_OscConfig+0x2b8>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a22:	f7ff fdbb 	bl	800059c <HAL_GetTick>
 8000a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a28:	e011      	b.n	8000a4e <HAL_RCC_OscConfig+0x2ce>
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	42470000 	.word	0x42470000
 8000a34:	42470e80 	.word	0x42470e80
 8000a38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a3c:	f7ff fdae 	bl	800059c <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d901      	bls.n	8000a4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	e0cf      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a4e:	4b6a      	ldr	r3, [pc, #424]	; (8000bf8 <HAL_RCC_OscConfig+0x478>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0f0      	beq.n	8000a3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d106      	bne.n	8000a70 <HAL_RCC_OscConfig+0x2f0>
 8000a62:	4b66      	ldr	r3, [pc, #408]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a66:	4a65      	ldr	r2, [pc, #404]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8000a6e:	e01c      	b.n	8000aaa <HAL_RCC_OscConfig+0x32a>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	d10c      	bne.n	8000a92 <HAL_RCC_OscConfig+0x312>
 8000a78:	4b60      	ldr	r3, [pc, #384]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a7c:	4a5f      	ldr	r2, [pc, #380]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6713      	str	r3, [r2, #112]	; 0x70
 8000a84:	4b5d      	ldr	r3, [pc, #372]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a88:	4a5c      	ldr	r2, [pc, #368]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8000a90:	e00b      	b.n	8000aaa <HAL_RCC_OscConfig+0x32a>
 8000a92:	4b5a      	ldr	r3, [pc, #360]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a96:	4a59      	ldr	r2, [pc, #356]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000a98:	f023 0301 	bic.w	r3, r3, #1
 8000a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000a9e:	4b57      	ldr	r3, [pc, #348]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000aa2:	4a56      	ldr	r2, [pc, #344]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000aa4:	f023 0304 	bic.w	r3, r3, #4
 8000aa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d015      	beq.n	8000ade <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ab2:	f7ff fd73 	bl	800059c <HAL_GetTick>
 8000ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab8:	e00a      	b.n	8000ad0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aba:	f7ff fd6f 	bl	800059c <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d901      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000acc:	2303      	movs	r3, #3
 8000ace:	e08e      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0ee      	beq.n	8000aba <HAL_RCC_OscConfig+0x33a>
 8000adc:	e014      	b.n	8000b08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ade:	f7ff fd5d 	bl	800059c <HAL_GetTick>
 8000ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae4:	e00a      	b.n	8000afc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae6:	f7ff fd59 	bl	800059c <HAL_GetTick>
 8000aea:	4602      	mov	r2, r0
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d901      	bls.n	8000afc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000af8:	2303      	movs	r3, #3
 8000afa:	e078      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000afc:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1ee      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d105      	bne.n	8000b1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b0e:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a3a      	ldr	r2, [pc, #232]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d064      	beq.n	8000bec <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b22:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d05c      	beq.n	8000be8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d141      	bne.n	8000bba <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b36:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <HAL_RCC_OscConfig+0x480>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b3c:	f7ff fd2e 	bl	800059c <HAL_GetTick>
 8000b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b42:	e008      	b.n	8000b56 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b44:	f7ff fd2a 	bl	800059c <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d901      	bls.n	8000b56 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000b52:	2303      	movs	r3, #3
 8000b54:	e04b      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f0      	bne.n	8000b44 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69da      	ldr	r2, [r3, #28]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a1b      	ldr	r3, [r3, #32]
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b70:	019b      	lsls	r3, r3, #6
 8000b72:	431a      	orrs	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	085b      	lsrs	r3, r3, #1
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	041b      	lsls	r3, r3, #16
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	061b      	lsls	r3, r3, #24
 8000b86:	491d      	ldr	r1, [pc, #116]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_RCC_OscConfig+0x480>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b92:	f7ff fd03 	bl	800059c <HAL_GetTick>
 8000b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b98:	e008      	b.n	8000bac <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b9a:	f7ff fcff 	bl	800059c <HAL_GetTick>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d901      	bls.n	8000bac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e020      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0f0      	beq.n	8000b9a <HAL_RCC_OscConfig+0x41a>
 8000bb8:	e018      	b.n	8000bec <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_RCC_OscConfig+0x480>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fcec 	bl	800059c <HAL_GetTick>
 8000bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bc6:	e008      	b.n	8000bda <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc8:	f7ff fce8 	bl	800059c <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e009      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_RCC_OscConfig+0x47c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f0      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x448>
 8000be6:	e001      	b.n	8000bec <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40007000 	.word	0x40007000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	42470060 	.word	0x42470060

08000c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e0ca      	b.n	8000dae <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c18:	4b67      	ldr	r3, [pc, #412]	; (8000db8 <HAL_RCC_ClockConfig+0x1b4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d90c      	bls.n	8000c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c26:	4b64      	ldr	r3, [pc, #400]	; (8000db8 <HAL_RCC_ClockConfig+0x1b4>)
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c2e:	4b62      	ldr	r3, [pc, #392]	; (8000db8 <HAL_RCC_ClockConfig+0x1b4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d001      	beq.n	8000c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e0b6      	b.n	8000dae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d020      	beq.n	8000c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d005      	beq.n	8000c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c58:	4b58      	ldr	r3, [pc, #352]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	4a57      	ldr	r2, [pc, #348]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d005      	beq.n	8000c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c70:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	4a51      	ldr	r2, [pc, #324]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c7c:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	494c      	ldr	r1, [pc, #304]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d044      	beq.n	8000d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d107      	bne.n	8000cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d119      	bne.n	8000ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e07d      	b.n	8000dae <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d003      	beq.n	8000cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d107      	bne.n	8000cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cc2:	4b3e      	ldr	r3, [pc, #248]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d109      	bne.n	8000ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e06d      	b.n	8000dae <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd2:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e065      	b.n	8000dae <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ce2:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f023 0203 	bic.w	r2, r3, #3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4933      	ldr	r1, [pc, #204]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cf4:	f7ff fc52 	bl	800059c <HAL_GetTick>
 8000cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cfa:	e00a      	b.n	8000d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cfc:	f7ff fc4e 	bl	800059c <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d901      	bls.n	8000d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e04d      	b.n	8000dae <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f003 020c 	and.w	r2, r3, #12
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d1eb      	bne.n	8000cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <HAL_RCC_ClockConfig+0x1b4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d20c      	bcs.n	8000d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <HAL_RCC_ClockConfig+0x1b4>)
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <HAL_RCC_ClockConfig+0x1b4>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d001      	beq.n	8000d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e030      	b.n	8000dae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d008      	beq.n	8000d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	4915      	ldr	r1, [pc, #84]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000d66:	4313      	orrs	r3, r2
 8000d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d009      	beq.n	8000d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	490d      	ldr	r1, [pc, #52]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d8a:	f000 f81d 	bl	8000dc8 <HAL_RCC_GetSysClockFreq>
 8000d8e:	4601      	mov	r1, r0
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_RCC_ClockConfig+0x1b8>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	091b      	lsrs	r3, r3, #4
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	fa21 f303 	lsr.w	r3, r1, r3
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8000da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000da6:	200f      	movs	r0, #15
 8000da8:	f7ff fbb4 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023c00 	.word	0x40023c00
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	08003bd4 	.word	0x08003bd4
 8000dc4:	2000000c 	.word	0x2000000c

08000dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000dde:	4b50      	ldr	r3, [pc, #320]	; (8000f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d007      	beq.n	8000dfa <HAL_RCC_GetSysClockFreq+0x32>
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d008      	beq.n	8000e00 <HAL_RCC_GetSysClockFreq+0x38>
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 808d 	bne.w	8000f0e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000df4:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000df6:	60bb      	str	r3, [r7, #8]
       break;
 8000df8:	e08c      	b.n	8000f14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000dfa:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <HAL_RCC_GetSysClockFreq+0x160>)
 8000dfc:	60bb      	str	r3, [r7, #8]
      break;
 8000dfe:	e089      	b.n	8000f14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e00:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e0a:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d023      	beq.n	8000e5e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e16:	4b42      	ldr	r3, [pc, #264]	; (8000f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	099b      	lsrs	r3, r3, #6
 8000e1c:	f04f 0400 	mov.w	r4, #0
 8000e20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	ea03 0501 	and.w	r5, r3, r1
 8000e2c:	ea04 0602 	and.w	r6, r4, r2
 8000e30:	4a3d      	ldr	r2, [pc, #244]	; (8000f28 <HAL_RCC_GetSysClockFreq+0x160>)
 8000e32:	fb02 f106 	mul.w	r1, r2, r6
 8000e36:	2200      	movs	r2, #0
 8000e38:	fb02 f205 	mul.w	r2, r2, r5
 8000e3c:	440a      	add	r2, r1
 8000e3e:	493a      	ldr	r1, [pc, #232]	; (8000f28 <HAL_RCC_GetSysClockFreq+0x160>)
 8000e40:	fba5 0101 	umull	r0, r1, r5, r1
 8000e44:	1853      	adds	r3, r2, r1
 8000e46:	4619      	mov	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f04f 0400 	mov.w	r4, #0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4623      	mov	r3, r4
 8000e52:	f7ff f9bd 	bl	80001d0 <__aeabi_uldivmod>
 8000e56:	4603      	mov	r3, r0
 8000e58:	460c      	mov	r4, r1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e049      	b.n	8000ef2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e5e:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	099b      	lsrs	r3, r3, #6
 8000e64:	f04f 0400 	mov.w	r4, #0
 8000e68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	ea03 0501 	and.w	r5, r3, r1
 8000e74:	ea04 0602 	and.w	r6, r4, r2
 8000e78:	4629      	mov	r1, r5
 8000e7a:	4632      	mov	r2, r6
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	f04f 0400 	mov.w	r4, #0
 8000e84:	0154      	lsls	r4, r2, #5
 8000e86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000e8a:	014b      	lsls	r3, r1, #5
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4622      	mov	r2, r4
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	eb62 0206 	sbc.w	r2, r2, r6
 8000e96:	f04f 0300 	mov.w	r3, #0
 8000e9a:	f04f 0400 	mov.w	r4, #0
 8000e9e:	0194      	lsls	r4, r2, #6
 8000ea0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000ea4:	018b      	lsls	r3, r1, #6
 8000ea6:	1a5b      	subs	r3, r3, r1
 8000ea8:	eb64 0402 	sbc.w	r4, r4, r2
 8000eac:	f04f 0100 	mov.w	r1, #0
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	00e2      	lsls	r2, r4, #3
 8000eb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000eba:	00d9      	lsls	r1, r3, #3
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4614      	mov	r4, r2
 8000ec0:	195b      	adds	r3, r3, r5
 8000ec2:	eb44 0406 	adc.w	r4, r4, r6
 8000ec6:	f04f 0100 	mov.w	r1, #0
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	02a2      	lsls	r2, r4, #10
 8000ed0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000ed4:	0299      	lsls	r1, r3, #10
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4614      	mov	r4, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	4621      	mov	r1, r4
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f04f 0400 	mov.w	r4, #0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	f7ff f972 	bl	80001d0 <__aeabi_uldivmod>
 8000eec:	4603      	mov	r3, r0
 8000eee:	460c      	mov	r4, r1
 8000ef0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	0c1b      	lsrs	r3, r3, #16
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	3301      	adds	r3, #1
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	60bb      	str	r3, [r7, #8]
      break;
 8000f0c:	e002      	b.n	8000f14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000f10:	60bb      	str	r3, [r7, #8]
      break;
 8000f12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f14:	68bb      	ldr	r3, [r7, #8]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	00f42400 	.word	0x00f42400
 8000f28:	017d7840 	.word	0x017d7840

08000f2c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000f32:	f3ef 8305 	mrs	r3, IPSR
 8000f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8000f38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10f      	bne.n	8000f5e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8000f42:	607b      	str	r3, [r7, #4]
  return(result);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <osKernelInitialize+0x32>
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <osKernelInitialize+0x64>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d109      	bne.n	8000f66 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000f52:	f3ef 8311 	mrs	r3, BASEPRI
 8000f56:	603b      	str	r3, [r7, #0]
  return(result);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8000f5e:	f06f 0305 	mvn.w	r3, #5
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e00c      	b.n	8000f80 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <osKernelInitialize+0x64>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d105      	bne.n	8000f7a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <osKernelInitialize+0x64>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	e002      	b.n	8000f80 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8000f80:	68fb      	ldr	r3, [r7, #12]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	2000002c 	.word	0x2000002c

08000f94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000f9a:	f3ef 8305 	mrs	r3, IPSR
 8000f9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10f      	bne.n	8000fc6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8000faa:	607b      	str	r3, [r7, #4]
  return(result);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d109      	bne.n	8000fc6 <osKernelStart+0x32>
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <osKernelStart+0x64>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d109      	bne.n	8000fce <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8000fba:	f3ef 8311 	mrs	r3, BASEPRI
 8000fbe:	603b      	str	r3, [r7, #0]
  return(result);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <osKernelStart+0x3a>
    stat = osErrorISR;
 8000fc6:	f06f 0305 	mvn.w	r3, #5
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e00e      	b.n	8000fec <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <osKernelStart+0x64>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d107      	bne.n	8000fe6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <osKernelStart+0x64>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8000fdc:	f001 f85a 	bl	8002094 <vTaskStartScheduler>
      stat = osOK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e002      	b.n	8000fec <osKernelStart+0x58>
    } else {
      stat = osError;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8000fec:	68fb      	ldr	r3, [r7, #12]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000002c 	.word	0x2000002c

08000ffc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b092      	sub	sp, #72	; 0x48
 8001000:	af04      	add	r7, sp, #16
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800100c:	f3ef 8305 	mrs	r3, IPSR
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001014:	2b00      	cmp	r3, #0
 8001016:	f040 8094 	bne.w	8001142 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800101a:	f3ef 8310 	mrs	r3, PRIMASK
 800101e:	623b      	str	r3, [r7, #32]
  return(result);
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f040 808d 	bne.w	8001142 <osThreadNew+0x146>
 8001028:	4b48      	ldr	r3, [pc, #288]	; (800114c <osThreadNew+0x150>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d106      	bne.n	800103e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001030:	f3ef 8311 	mrs	r3, BASEPRI
 8001034:	61fb      	str	r3, [r7, #28]
  return(result);
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 8082 	bne.w	8001142 <osThreadNew+0x146>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d07e      	beq.n	8001142 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001048:	2318      	movs	r3, #24
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800104c:	2300      	movs	r3, #0
 800104e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001050:	f107 031b 	add.w	r3, r7, #27
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d045      	beq.n	80010ee <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <osThreadNew+0x74>
        name = attr->name;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	2b00      	cmp	r3, #0
 8001082:	d008      	beq.n	8001096 <osThreadNew+0x9a>
 8001084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001086:	2b38      	cmp	r3, #56	; 0x38
 8001088:	d805      	bhi.n	8001096 <osThreadNew+0x9a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <osThreadNew+0x9e>
        return (NULL);
 8001096:	2300      	movs	r3, #0
 8001098:	e054      	b.n	8001144 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00e      	beq.n	80010d0 <osThreadNew+0xd4>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b53      	cmp	r3, #83	; 0x53
 80010b8:	d90a      	bls.n	80010d0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <osThreadNew+0xd4>
        mem = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ce:	e010      	b.n	80010f2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10c      	bne.n	80010f2 <osThreadNew+0xf6>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d108      	bne.n	80010f2 <osThreadNew+0xf6>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d104      	bne.n	80010f2 <osThreadNew+0xf6>
          mem = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ec:	e001      	b.n	80010f2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d110      	bne.n	800111a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001100:	9202      	str	r2, [sp, #8]
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800110c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f000 fe04 	bl	8001d1c <xTaskCreateStatic>
 8001114:	4603      	mov	r3, r0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e013      	b.n	8001142 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800111a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111c:	2b00      	cmp	r3, #0
 800111e:	d110      	bne.n	8001142 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001122:	b29a      	uxth	r2, r3
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f000 fe4b 	bl	8001dce <xTaskCreate>
 8001138:	4603      	mov	r3, r0
 800113a:	2b01      	cmp	r3, #1
 800113c:	d001      	beq.n	8001142 <osThreadNew+0x146>
          hTask = NULL;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001142:	697b      	ldr	r3, [r7, #20]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3738      	adds	r7, #56	; 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000002c 	.word	0x2000002c

08001150 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001158:	f3ef 8305 	mrs	r3, IPSR
 800115c:	613b      	str	r3, [r7, #16]
  return(result);
 800115e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10f      	bne.n	8001184 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001164:	f3ef 8310 	mrs	r3, PRIMASK
 8001168:	60fb      	str	r3, [r7, #12]
  return(result);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d109      	bne.n	8001184 <osDelay+0x34>
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <osDelay+0x58>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d109      	bne.n	800118c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001178:	f3ef 8311 	mrs	r3, BASEPRI
 800117c:	60bb      	str	r3, [r7, #8]
  return(result);
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <osDelay+0x3c>
    stat = osErrorISR;
 8001184:	f06f 0305 	mvn.w	r3, #5
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	e007      	b.n	800119c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 ff48 	bl	800202c <vTaskDelay>
    }
  }

  return (stat);
 800119c:	697b      	ldr	r3, [r7, #20]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000002c 	.word	0x2000002c

080011ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80011bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <vApplicationGetIdleTaskMemory+0x30>)
 80011c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	601a      	str	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000030 	.word	0x20000030
 80011dc:	20000084 	.word	0x20000084

080011e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4a07      	ldr	r2, [pc, #28]	; (800120c <vApplicationGetTimerTaskMemory+0x2c>)
 80011f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <vApplicationGetTimerTaskMemory+0x30>)
 80011f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fe:	601a      	str	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	20000284 	.word	0x20000284
 8001210:	200002d8 	.word	0x200002d8

08001214 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f103 0208 	add.w	r2, r3, #8
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f103 0208 	add.w	r2, r3, #8
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f103 0208 	add.w	r2, r3, #8
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80012b6:	b480      	push	{r7}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d103      	bne.n	80012d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	e00c      	b.n	80012f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3308      	adds	r3, #8
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	e002      	b.n	80012e4 <vListInsert+0x2e>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d2f6      	bcs.n	80012de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6892      	ldr	r2, [r2, #8]
 800133e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6852      	ldr	r2, [r2, #4]
 8001348:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	d103      	bne.n	800135c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	1e5a      	subs	r2, r3, #1
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001394:	f383 8811 	msr	BASEPRI, r3
 8001398:	f3bf 8f6f 	isb	sy
 800139c:	f3bf 8f4f 	dsb	sy
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	e7fe      	b.n	80013a2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80013a4:	f001 ffaa 	bl	80032fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b0:	68f9      	ldr	r1, [r7, #12]
 80013b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80013b4:	fb01 f303 	mul.w	r3, r1, r3
 80013b8:	441a      	add	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d4:	3b01      	subs	r3, #1
 80013d6:	68f9      	ldr	r1, [r7, #12]
 80013d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	441a      	add	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	22ff      	movs	r2, #255	; 0xff
 80013e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	22ff      	movs	r2, #255	; 0xff
 80013f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d114      	bne.n	8001424 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d01a      	beq.n	8001438 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3310      	adds	r3, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f001 f8ca 	bl	80025a0 <xTaskRemoveFromEventList>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d012      	beq.n	8001438 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <xQueueGenericReset+0xcc>)
 8001414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f3bf 8f4f 	dsb	sy
 800141e:	f3bf 8f6f 	isb	sy
 8001422:	e009      	b.n	8001438 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3310      	adds	r3, #16
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fef3 	bl	8001214 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3324      	adds	r3, #36	; 0x24
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff feee 	bl	8001214 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001438:	f001 ff8e 	bl	8003358 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000ed04 	.word	0xe000ed04

0800144c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af02      	add	r7, sp, #8
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <xQueueGenericCreateStatic+0x28>
 8001460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001464:	f383 8811 	msr	BASEPRI, r3
 8001468:	f3bf 8f6f 	isb	sy
 800146c:	f3bf 8f4f 	dsb	sy
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
 8001472:	e7fe      	b.n	8001472 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <xQueueGenericCreateStatic+0x42>
 800147a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147e:	f383 8811 	msr	BASEPRI, r3
 8001482:	f3bf 8f6f 	isb	sy
 8001486:	f3bf 8f4f 	dsb	sy
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	e7fe      	b.n	800148c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <xQueueGenericCreateStatic+0x4e>
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <xQueueGenericCreateStatic+0x52>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <xQueueGenericCreateStatic+0x54>
 800149e:	2300      	movs	r3, #0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d109      	bne.n	80014b8 <xQueueGenericCreateStatic+0x6c>
 80014a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a8:	f383 8811 	msr	BASEPRI, r3
 80014ac:	f3bf 8f6f 	isb	sy
 80014b0:	f3bf 8f4f 	dsb	sy
 80014b4:	623b      	str	r3, [r7, #32]
 80014b6:	e7fe      	b.n	80014b6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <xQueueGenericCreateStatic+0x78>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <xQueueGenericCreateStatic+0x7c>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <xQueueGenericCreateStatic+0x7e>
 80014c8:	2300      	movs	r3, #0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <xQueueGenericCreateStatic+0x96>
 80014ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d2:	f383 8811 	msr	BASEPRI, r3
 80014d6:	f3bf 8f6f 	isb	sy
 80014da:	f3bf 8f4f 	dsb	sy
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	e7fe      	b.n	80014e0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80014e2:	2348      	movs	r3, #72	; 0x48
 80014e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b48      	cmp	r3, #72	; 0x48
 80014ea:	d009      	beq.n	8001500 <xQueueGenericCreateStatic+0xb4>
 80014ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f0:	f383 8811 	msr	BASEPRI, r3
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	f3bf 8f4f 	dsb	sy
 80014fc:	61bb      	str	r3, [r7, #24]
 80014fe:	e7fe      	b.n	80014fe <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00d      	beq.n	8001526 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001512:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	4613      	mov	r3, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f805 	bl	8001530 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001528:	4618      	mov	r0, r3
 800152a:	3730      	adds	r7, #48	; 0x30
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d103      	bne.n	800154c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e002      	b.n	8001552 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800155e:	2101      	movs	r1, #1
 8001560:	69b8      	ldr	r0, [r7, #24]
 8001562:	f7ff ff0b 	bl	800137c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	; 0x38
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800157e:	2300      	movs	r3, #0
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001588:	2b00      	cmp	r3, #0
 800158a:	d109      	bne.n	80015a0 <xQueueGenericSend+0x30>
 800158c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001590:	f383 8811 	msr	BASEPRI, r3
 8001594:	f3bf 8f6f 	isb	sy
 8001598:	f3bf 8f4f 	dsb	sy
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
 800159e:	e7fe      	b.n	800159e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d103      	bne.n	80015ae <xQueueGenericSend+0x3e>
 80015a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <xQueueGenericSend+0x42>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <xQueueGenericSend+0x44>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <xQueueGenericSend+0x5c>
 80015b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015bc:	f383 8811 	msr	BASEPRI, r3
 80015c0:	f3bf 8f6f 	isb	sy
 80015c4:	f3bf 8f4f 	dsb	sy
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ca:	e7fe      	b.n	80015ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d103      	bne.n	80015da <xQueueGenericSend+0x6a>
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <xQueueGenericSend+0x6e>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <xQueueGenericSend+0x70>
 80015de:	2300      	movs	r3, #0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <xQueueGenericSend+0x88>
 80015e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e8:	f383 8811 	msr	BASEPRI, r3
 80015ec:	f3bf 8f6f 	isb	sy
 80015f0:	f3bf 8f4f 	dsb	sy
 80015f4:	623b      	str	r3, [r7, #32]
 80015f6:	e7fe      	b.n	80015f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80015f8:	f001 f98e 	bl	8002918 <xTaskGetSchedulerState>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <xQueueGenericSend+0x98>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <xQueueGenericSend+0x9c>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <xQueueGenericSend+0x9e>
 800160c:	2300      	movs	r3, #0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <xQueueGenericSend+0xb6>
 8001612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001616:	f383 8811 	msr	BASEPRI, r3
 800161a:	f3bf 8f6f 	isb	sy
 800161e:	f3bf 8f4f 	dsb	sy
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	e7fe      	b.n	8001624 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001626:	f001 fe69 	bl	80032fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001632:	429a      	cmp	r2, r3
 8001634:	d302      	bcc.n	800163c <xQueueGenericSend+0xcc>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d129      	bne.n	8001690 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001642:	f000 f9ff 	bl	8001a44 <prvCopyDataToQueue>
 8001646:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	2b00      	cmp	r3, #0
 800164e:	d010      	beq.n	8001672 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001652:	3324      	adds	r3, #36	; 0x24
 8001654:	4618      	mov	r0, r3
 8001656:	f000 ffa3 	bl	80025a0 <xTaskRemoveFromEventList>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001660:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <xQueueGenericSend+0x1f0>)
 8001662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	f3bf 8f4f 	dsb	sy
 800166c:	f3bf 8f6f 	isb	sy
 8001670:	e00a      	b.n	8001688 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001678:	4b39      	ldr	r3, [pc, #228]	; (8001760 <xQueueGenericSend+0x1f0>)
 800167a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	f3bf 8f4f 	dsb	sy
 8001684:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001688:	f001 fe66 	bl	8003358 <vPortExitCritical>
				return pdPASS;
 800168c:	2301      	movs	r3, #1
 800168e:	e063      	b.n	8001758 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d103      	bne.n	800169e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001696:	f001 fe5f 	bl	8003358 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800169a:	2300      	movs	r3, #0
 800169c:	e05c      	b.n	8001758 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800169e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d106      	bne.n	80016b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 ffdb 	bl	8002664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80016ae:	2301      	movs	r3, #1
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80016b2:	f001 fe51 	bl	8003358 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80016b6:	f000 fd51 	bl	800215c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80016ba:	f001 fe1f 	bl	80032fc <vPortEnterCritical>
 80016be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ca:	d103      	bne.n	80016d4 <xQueueGenericSend+0x164>
 80016cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d103      	bne.n	80016ea <xQueueGenericSend+0x17a>
 80016e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016ea:	f001 fe35 	bl	8003358 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016ee:	1d3a      	adds	r2, r7, #4
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 ffca 	bl	8002690 <xTaskCheckForTimeOut>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d124      	bne.n	800174c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001704:	f000 fa96 	bl	8001c34 <prvIsQueueFull>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d018      	beq.n	8001740 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001710:	3310      	adds	r3, #16
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fef4 	bl	8002504 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800171c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800171e:	f000 fa21 	bl	8001b64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001722:	f000 fd29 	bl	8002178 <xTaskResumeAll>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	f47f af7c 	bne.w	8001626 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <xQueueGenericSend+0x1f0>)
 8001730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	f3bf 8f4f 	dsb	sy
 800173a:	f3bf 8f6f 	isb	sy
 800173e:	e772      	b.n	8001626 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001742:	f000 fa0f 	bl	8001b64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001746:	f000 fd17 	bl	8002178 <xTaskResumeAll>
 800174a:	e76c      	b.n	8001626 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800174c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800174e:	f000 fa09 	bl	8001b64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001752:	f000 fd11 	bl	8002178 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001756:	2300      	movs	r3, #0
		}
	}
}
 8001758:	4618      	mov	r0, r3
 800175a:	3738      	adds	r7, #56	; 0x38
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	e000ed04 	.word	0xe000ed04

08001764 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08e      	sub	sp, #56	; 0x38
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001778:	2b00      	cmp	r3, #0
 800177a:	d109      	bne.n	8001790 <xQueueGenericSendFromISR+0x2c>
 800177c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001780:	f383 8811 	msr	BASEPRI, r3
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	f3bf 8f4f 	dsb	sy
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
 800178e:	e7fe      	b.n	800178e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <xQueueGenericSendFromISR+0x3a>
 8001796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <xQueueGenericSendFromISR+0x3e>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <xQueueGenericSendFromISR+0x40>
 80017a2:	2300      	movs	r3, #0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <xQueueGenericSendFromISR+0x58>
 80017a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ac:	f383 8811 	msr	BASEPRI, r3
 80017b0:	f3bf 8f6f 	isb	sy
 80017b4:	f3bf 8f4f 	dsb	sy
 80017b8:	623b      	str	r3, [r7, #32]
 80017ba:	e7fe      	b.n	80017ba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d103      	bne.n	80017ca <xQueueGenericSendFromISR+0x66>
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <xQueueGenericSendFromISR+0x6a>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <xQueueGenericSendFromISR+0x6c>
 80017ce:	2300      	movs	r3, #0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <xQueueGenericSendFromISR+0x84>
 80017d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d8:	f383 8811 	msr	BASEPRI, r3
 80017dc:	f3bf 8f6f 	isb	sy
 80017e0:	f3bf 8f4f 	dsb	sy
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e7fe      	b.n	80017e6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80017e8:	f001 fe44 	bl	8003474 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80017ec:	f3ef 8211 	mrs	r2, BASEPRI
 80017f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f4:	f383 8811 	msr	BASEPRI, r3
 80017f8:	f3bf 8f6f 	isb	sy
 80017fc:	f3bf 8f4f 	dsb	sy
 8001800:	61ba      	str	r2, [r7, #24]
 8001802:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001804:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800180c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	429a      	cmp	r2, r3
 8001812:	d302      	bcc.n	800181a <xQueueGenericSendFromISR+0xb6>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d12c      	bne.n	8001874 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800181a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800182a:	f000 f90b 	bl	8001a44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800182e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001836:	d112      	bne.n	800185e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	2b00      	cmp	r3, #0
 800183e:	d016      	beq.n	800186e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001842:	3324      	adds	r3, #36	; 0x24
 8001844:	4618      	mov	r0, r3
 8001846:	f000 feab 	bl	80025a0 <xTaskRemoveFromEventList>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00e      	beq.n	800186e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	e007      	b.n	800186e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800185e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001862:	3301      	adds	r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	b25a      	sxtb	r2, r3
 8001868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800186e:	2301      	movs	r3, #1
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001872:	e001      	b.n	8001878 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
 8001878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001884:	4618      	mov	r0, r3
 8001886:	3738      	adds	r7, #56	; 0x38
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001898:	2300      	movs	r3, #0
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80018a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <xQueueReceive+0x2e>
	__asm volatile
 80018a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	e7fe      	b.n	80018b8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d103      	bne.n	80018c8 <xQueueReceive+0x3c>
 80018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <xQueueReceive+0x40>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <xQueueReceive+0x42>
 80018cc:	2300      	movs	r3, #0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <xQueueReceive+0x5a>
 80018d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d6:	f383 8811 	msr	BASEPRI, r3
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	f3bf 8f4f 	dsb	sy
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	e7fe      	b.n	80018e4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80018e6:	f001 f817 	bl	8002918 <xTaskGetSchedulerState>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <xQueueReceive+0x6a>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <xQueueReceive+0x6e>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <xQueueReceive+0x70>
 80018fa:	2300      	movs	r3, #0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <xQueueReceive+0x88>
 8001900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001904:	f383 8811 	msr	BASEPRI, r3
 8001908:	f3bf 8f6f 	isb	sy
 800190c:	f3bf 8f4f 	dsb	sy
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	e7fe      	b.n	8001912 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001914:	f001 fcf2 	bl	80032fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01f      	beq.n	8001964 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001928:	f000 f8f6 	bl	8001b18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00f      	beq.n	800195c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	3310      	adds	r3, #16
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fe2d 	bl	80025a0 <xTaskRemoveFromEventList>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800194c:	4b3c      	ldr	r3, [pc, #240]	; (8001a40 <xQueueReceive+0x1b4>)
 800194e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	f3bf 8f4f 	dsb	sy
 8001958:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800195c:	f001 fcfc 	bl	8003358 <vPortExitCritical>
				return pdPASS;
 8001960:	2301      	movs	r3, #1
 8001962:	e069      	b.n	8001a38 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d103      	bne.n	8001972 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800196a:	f001 fcf5 	bl	8003358 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800196e:	2300      	movs	r3, #0
 8001970:	e062      	b.n	8001a38 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d106      	bne.n	8001986 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fe71 	bl	8002664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001982:	2301      	movs	r3, #1
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001986:	f001 fce7 	bl	8003358 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800198a:	f000 fbe7 	bl	800215c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800198e:	f001 fcb5 	bl	80032fc <vPortEnterCritical>
 8001992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001998:	b25b      	sxtb	r3, r3
 800199a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199e:	d103      	bne.n	80019a8 <xQueueReceive+0x11c>
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d103      	bne.n	80019be <xQueueReceive+0x132>
 80019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019be:	f001 fccb 	bl	8003358 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019c2:	1d3a      	adds	r2, r7, #4
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fe60 	bl	8002690 <xTaskCheckForTimeOut>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d123      	bne.n	8001a1e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80019d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019d8:	f000 f916 	bl	8001c08 <prvIsQueueEmpty>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d017      	beq.n	8001a12 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80019e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e4:	3324      	adds	r3, #36	; 0x24
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fd8a 	bl	8002504 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80019f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019f2:	f000 f8b7 	bl	8001b64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80019f6:	f000 fbbf 	bl	8002178 <xTaskResumeAll>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d189      	bne.n	8001914 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <xQueueReceive+0x1b4>)
 8001a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	f3bf 8f6f 	isb	sy
 8001a10:	e780      	b.n	8001914 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a14:	f000 f8a6 	bl	8001b64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a18:	f000 fbae 	bl	8002178 <xTaskResumeAll>
 8001a1c:	e77a      	b.n	8001914 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a20:	f000 f8a0 	bl	8001b64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a24:	f000 fba8 	bl	8002178 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a2a:	f000 f8ed 	bl	8001c08 <prvIsQueueEmpty>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f43f af6f 	beq.w	8001914 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001a36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3730      	adds	r7, #48	; 0x30
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	e000ed04 	.word	0xe000ed04

08001a44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10d      	bne.n	8001a7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d14d      	bne.n	8001b06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 ff70 	bl	8002954 <xTaskPriorityDisinherit>
 8001a74:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	e043      	b.n	8001b06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d119      	bne.n	8001ab8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6898      	ldr	r0, [r3, #8]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	68b9      	ldr	r1, [r7, #8]
 8001a90:	f002 f86e 	bl	8003b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	441a      	add	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d32b      	bcc.n	8001b06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	e026      	b.n	8001b06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	68d8      	ldr	r0, [r3, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68b9      	ldr	r1, [r7, #8]
 8001ac4:	f002 f854 	bl	8003b70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	425b      	negs	r3, r3
 8001ad2:	441a      	add	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	425b      	negs	r3, r3
 8001aee:	441a      	add	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d105      	bne.n	8001b06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001b0e:	697b      	ldr	r3, [r7, #20]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d018      	beq.n	8001b5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	441a      	add	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d303      	bcc.n	8001b4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68d9      	ldr	r1, [r3, #12]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	461a      	mov	r2, r3
 8001b56:	6838      	ldr	r0, [r7, #0]
 8001b58:	f002 f80a 	bl	8003b70 <memcpy>
	}
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001b6c:	f001 fbc6 	bl	80032fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b78:	e011      	b.n	8001b9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d012      	beq.n	8001ba8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3324      	adds	r3, #36	; 0x24
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fd0a 	bl	80025a0 <xTaskRemoveFromEventList>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001b92:	f000 fddd 	bl	8002750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	dce9      	bgt.n	8001b7a <prvUnlockQueue+0x16>
 8001ba6:	e000      	b.n	8001baa <prvUnlockQueue+0x46>
					break;
 8001ba8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	22ff      	movs	r2, #255	; 0xff
 8001bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001bb2:	f001 fbd1 	bl	8003358 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001bb6:	f001 fba1 	bl	80032fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bc2:	e011      	b.n	8001be8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d012      	beq.n	8001bf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3310      	adds	r3, #16
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fce5 	bl	80025a0 <xTaskRemoveFromEventList>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001bdc:	f000 fdb8 	bl	8002750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	dce9      	bgt.n	8001bc4 <prvUnlockQueue+0x60>
 8001bf0:	e000      	b.n	8001bf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001bf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	22ff      	movs	r2, #255	; 0xff
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001bfc:	f001 fbac 	bl	8003358 <vPortExitCritical>
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001c10:	f001 fb74 	bl	80032fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e001      	b.n	8001c26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001c26:	f001 fb97 	bl	8003358 <vPortExitCritical>

	return xReturn;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001c3c:	f001 fb5e 	bl	80032fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d102      	bne.n	8001c52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e001      	b.n	8001c56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001c56:	f001 fb7f 	bl	8003358 <vPortExitCritical>

	return xReturn;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	e014      	b.n	8001c9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <vQueueAddToRegistry+0x4c>)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10b      	bne.n	8001c98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001c80:	490b      	ldr	r1, [pc, #44]	; (8001cb0 <vQueueAddToRegistry+0x4c>)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <vQueueAddToRegistry+0x4c>)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001c96:	e005      	b.n	8001ca4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b07      	cmp	r3, #7
 8001ca2:	d9e7      	bls.n	8001c74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	200048fc 	.word	0x200048fc

08001cb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001cc4:	f001 fb1a 	bl	80032fc <vPortEnterCritical>
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d103      	bne.n	8001cde <vQueueWaitForMessageRestricted+0x2a>
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cea:	d103      	bne.n	8001cf4 <vQueueWaitForMessageRestricted+0x40>
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cf4:	f001 fb30 	bl	8003358 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d106      	bne.n	8001d0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	3324      	adds	r3, #36	; 0x24
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fc1f 	bl	800254c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff28 	bl	8001b64 <prvUnlockQueue>
	}
 8001d14:	bf00      	nop
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	; 0x38
 8001d20:	af04      	add	r7, sp, #16
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <xTaskCreateStatic+0x28>
 8001d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d34:	f383 8811 	msr	BASEPRI, r3
 8001d38:	f3bf 8f6f 	isb	sy
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	e7fe      	b.n	8001d42 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <xTaskCreateStatic+0x42>
 8001d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	e7fe      	b.n	8001d5c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001d5e:	2354      	movs	r3, #84	; 0x54
 8001d60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b54      	cmp	r3, #84	; 0x54
 8001d66:	d009      	beq.n	8001d7c <xTaskCreateStatic+0x60>
 8001d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d6c:	f383 8811 	msr	BASEPRI, r3
 8001d70:	f3bf 8f6f 	isb	sy
 8001d74:	f3bf 8f4f 	dsb	sy
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	e7fe      	b.n	8001d7a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01e      	beq.n	8001dc0 <xTaskCreateStatic+0xa4>
 8001d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d01b      	beq.n	8001dc0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	2202      	movs	r2, #2
 8001d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9303      	str	r3, [sp, #12]
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f850 	bl	8001e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dba:	f000 f8cb 	bl	8001f54 <prvAddNewTaskToReadyList>
 8001dbe:	e001      	b.n	8001dc4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001dc4:	697b      	ldr	r3, [r7, #20]
	}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b08c      	sub	sp, #48	; 0x30
 8001dd2:	af04      	add	r7, sp, #16
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 fb84 	bl	80034f0 <pvPortMalloc>
 8001de8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00e      	beq.n	8001e0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001df0:	2054      	movs	r0, #84	; 0x54
 8001df2:	f001 fb7d 	bl	80034f0 <pvPortMalloc>
 8001df6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	631a      	str	r2, [r3, #48]	; 0x30
 8001e04:	e005      	b.n	8001e12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f001 fc34 	bl	8003674 <vPortFree>
 8001e0c:	e001      	b.n	8001e12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d017      	beq.n	8001e48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	2300      	movs	r3, #0
 8001e24:	9303      	str	r3, [sp, #12]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	9302      	str	r3, [sp, #8]
 8001e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f80e 	bl	8001e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e3c:	69f8      	ldr	r0, [r7, #28]
 8001e3e:	f000 f889 	bl	8001f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001e42:	2301      	movs	r3, #1
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	e002      	b.n	8001e4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e70:	3b01      	subs	r3, #1
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f023 0307 	bic.w	r3, r3, #7
 8001e7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <prvInitialiseNewTask+0x46>
 8001e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8e:	f383 8811 	msr	BASEPRI, r3
 8001e92:	f3bf 8f6f 	isb	sy
 8001e96:	f3bf 8f4f 	dsb	sy
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e7fe      	b.n	8001e9c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	e012      	b.n	8001eca <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	7819      	ldrb	r1, [r3, #0]
 8001eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3334      	adds	r3, #52	; 0x34
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d9e9      	bls.n	8001ea4 <prvInitialiseNewTask+0x4c>
 8001ed0:	e000      	b.n	8001ed4 <prvInitialiseNewTask+0x7c>
		{
			break;
 8001ed2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ede:	2b37      	cmp	r3, #55	; 0x37
 8001ee0:	d901      	bls.n	8001ee6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ee2:	2337      	movs	r3, #55	; 0x37
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efa:	3304      	adds	r3, #4
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f9a9 	bl	8001254 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f04:	3318      	adds	r3, #24
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f9a4 	bl	8001254 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	2200      	movs	r2, #0
 8001f26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	69b8      	ldr	r0, [r7, #24]
 8001f36:	f001 f8bd 	bl	80030b4 <pxPortInitialiseStack>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f4c:	bf00      	nop
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001f5c:	f001 f9ce 	bl	80032fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <prvAddNewTaskToReadyList+0xbc>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <prvAddNewTaskToReadyList+0xbc>)
 8001f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <prvAddNewTaskToReadyList+0xc0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001f72:	4a28      	ldr	r2, [pc, #160]	; (8002014 <prvAddNewTaskToReadyList+0xc0>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <prvAddNewTaskToReadyList+0xbc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d110      	bne.n	8001fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001f80:	f000 fc0a 	bl	8002798 <prvInitialiseTaskLists>
 8001f84:	e00d      	b.n	8001fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <prvAddNewTaskToReadyList+0xc4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <prvAddNewTaskToReadyList+0xc0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d802      	bhi.n	8001fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <prvAddNewTaskToReadyList+0xc0>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <prvAddNewTaskToReadyList+0xc8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	; (800201c <prvAddNewTaskToReadyList+0xc8>)
 8001faa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <prvAddNewTaskToReadyList+0xcc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d903      	bls.n	8001fc0 <prvAddNewTaskToReadyList+0x6c>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	4a18      	ldr	r2, [pc, #96]	; (8002020 <prvAddNewTaskToReadyList+0xcc>)
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <prvAddNewTaskToReadyList+0xd0>)
 8001fce:	441a      	add	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f7ff f949 	bl	800126e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001fdc:	f001 f9bc 	bl	8003358 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <prvAddNewTaskToReadyList+0xc4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00e      	beq.n	8002006 <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <prvAddNewTaskToReadyList+0xc0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d207      	bcs.n	8002006 <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <prvAddNewTaskToReadyList+0xd4>)
 8001ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	f3bf 8f4f 	dsb	sy
 8002002:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000bac 	.word	0x20000bac
 8002014:	200006d8 	.word	0x200006d8
 8002018:	20000bb8 	.word	0x20000bb8
 800201c:	20000bc8 	.word	0x20000bc8
 8002020:	20000bb4 	.word	0x20000bb4
 8002024:	200006dc 	.word	0x200006dc
 8002028:	e000ed04 	.word	0xe000ed04

0800202c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d016      	beq.n	800206c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <vTaskDelay+0x60>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <vTaskDelay+0x2e>
 8002046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204a:	f383 8811 	msr	BASEPRI, r3
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f3bf 8f4f 	dsb	sy
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	e7fe      	b.n	8002058 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800205a:	f000 f87f 	bl	800215c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800205e:	2100      	movs	r1, #0
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 fce3 	bl	8002a2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002066:	f000 f887 	bl	8002178 <xTaskResumeAll>
 800206a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d107      	bne.n	8002082 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <vTaskDelay+0x64>)
 8002074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f3bf 8f4f 	dsb	sy
 800207e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000bd4 	.word	0x20000bd4
 8002090:	e000ed04 	.word	0xe000ed04

08002094 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80020a2:	463a      	mov	r2, r7
 80020a4:	1d39      	adds	r1, r7, #4
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff f87e 	bl	80011ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	9202      	str	r2, [sp, #8]
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2300      	movs	r3, #0
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	460a      	mov	r2, r1
 80020c2:	4920      	ldr	r1, [pc, #128]	; (8002144 <vTaskStartScheduler+0xb0>)
 80020c4:	4820      	ldr	r0, [pc, #128]	; (8002148 <vTaskStartScheduler+0xb4>)
 80020c6:	f7ff fe29 	bl	8001d1c <xTaskCreateStatic>
 80020ca:	4602      	mov	r2, r0
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <vTaskStartScheduler+0xb8>)
 80020ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <vTaskStartScheduler+0xb8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80020d8:	2301      	movs	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e001      	b.n	80020e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d102      	bne.n	80020ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80020e8:	f000 fcf4 	bl	8002ad4 <xTimerCreateTimerTask>
 80020ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d115      	bne.n	8002120 <vTaskStartScheduler+0x8c>
 80020f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f8:	f383 8811 	msr	BASEPRI, r3
 80020fc:	f3bf 8f6f 	isb	sy
 8002100:	f3bf 8f4f 	dsb	sy
 8002104:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <vTaskStartScheduler+0xbc>)
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <vTaskStartScheduler+0xc0>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <vTaskStartScheduler+0xc4>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800211a:	f001 f851 	bl	80031c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800211e:	e00d      	b.n	800213c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002126:	d109      	bne.n	800213c <vTaskStartScheduler+0xa8>
 8002128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212c:	f383 8811 	msr	BASEPRI, r3
 8002130:	f3bf 8f6f 	isb	sy
 8002134:	f3bf 8f4f 	dsb	sy
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e7fe      	b.n	800213a <vTaskStartScheduler+0xa6>
}
 800213c:	bf00      	nop
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	08003bb0 	.word	0x08003bb0
 8002148:	08002769 	.word	0x08002769
 800214c:	20000bd0 	.word	0x20000bd0
 8002150:	20000bcc 	.word	0x20000bcc
 8002154:	20000bb8 	.word	0x20000bb8
 8002158:	20000bb0 	.word	0x20000bb0

0800215c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <vTaskSuspendAll+0x18>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	4a03      	ldr	r2, [pc, #12]	; (8002174 <vTaskSuspendAll+0x18>)
 8002168:	6013      	str	r3, [r2, #0]
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	20000bd4 	.word	0x20000bd4

08002178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <xTaskResumeAll+0x114>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <xTaskResumeAll+0x2a>
 800218e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002192:	f383 8811 	msr	BASEPRI, r3
 8002196:	f3bf 8f6f 	isb	sy
 800219a:	f3bf 8f4f 	dsb	sy
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	e7fe      	b.n	80021a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80021a2:	f001 f8ab 	bl	80032fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80021a6:	4b39      	ldr	r3, [pc, #228]	; (800228c <xTaskResumeAll+0x114>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	4a37      	ldr	r2, [pc, #220]	; (800228c <xTaskResumeAll+0x114>)
 80021ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021b0:	4b36      	ldr	r3, [pc, #216]	; (800228c <xTaskResumeAll+0x114>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d162      	bne.n	800227e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80021b8:	4b35      	ldr	r3, [pc, #212]	; (8002290 <xTaskResumeAll+0x118>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05e      	beq.n	800227e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021c0:	e02f      	b.n	8002222 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80021c2:	4b34      	ldr	r3, [pc, #208]	; (8002294 <xTaskResumeAll+0x11c>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3318      	adds	r3, #24
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f8aa 	bl	8001328 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3304      	adds	r3, #4
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f8a5 	bl	8001328 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e2:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <xTaskResumeAll+0x120>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d903      	bls.n	80021f2 <xTaskResumeAll+0x7a>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	4a2a      	ldr	r2, [pc, #168]	; (8002298 <xTaskResumeAll+0x120>)
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4a27      	ldr	r2, [pc, #156]	; (800229c <xTaskResumeAll+0x124>)
 8002200:	441a      	add	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3304      	adds	r3, #4
 8002206:	4619      	mov	r1, r3
 8002208:	4610      	mov	r0, r2
 800220a:	f7ff f830 	bl	800126e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <xTaskResumeAll+0x128>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	429a      	cmp	r2, r3
 800221a:	d302      	bcc.n	8002222 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <xTaskResumeAll+0x12c>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002222:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <xTaskResumeAll+0x11c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1cb      	bne.n	80021c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002230:	f000 fb4c 	bl	80028cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <xTaskResumeAll+0x130>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d010      	beq.n	8002262 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002240:	f000 f846 	bl	80022d0 <xTaskIncrementTick>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <xTaskResumeAll+0x12c>)
 800224c:	2201      	movs	r2, #1
 800224e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f1      	bne.n	8002240 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <xTaskResumeAll+0x130>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <xTaskResumeAll+0x12c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800226a:	2301      	movs	r3, #1
 800226c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <xTaskResumeAll+0x134>)
 8002270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800227e:	f001 f86b 	bl	8003358 <vPortExitCritical>

	return xAlreadyYielded;
 8002282:	68bb      	ldr	r3, [r7, #8]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000bd4 	.word	0x20000bd4
 8002290:	20000bac 	.word	0x20000bac
 8002294:	20000b6c 	.word	0x20000b6c
 8002298:	20000bb4 	.word	0x20000bb4
 800229c:	200006dc 	.word	0x200006dc
 80022a0:	200006d8 	.word	0x200006d8
 80022a4:	20000bc0 	.word	0x20000bc0
 80022a8:	20000bbc 	.word	0x20000bbc
 80022ac:	e000ed04 	.word	0xe000ed04

080022b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <xTaskGetTickCount+0x1c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80022bc:	687b      	ldr	r3, [r7, #4]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000bb0 	.word	0x20000bb0

080022d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022da:	4b51      	ldr	r3, [pc, #324]	; (8002420 <xTaskIncrementTick+0x150>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 808d 	bne.w	80023fe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022e4:	4b4f      	ldr	r3, [pc, #316]	; (8002424 <xTaskIncrementTick+0x154>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80022ec:	4a4d      	ldr	r2, [pc, #308]	; (8002424 <xTaskIncrementTick+0x154>)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d11f      	bne.n	8002338 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80022f8:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <xTaskIncrementTick+0x158>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <xTaskIncrementTick+0x46>
 8002302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002306:	f383 8811 	msr	BASEPRI, r3
 800230a:	f3bf 8f6f 	isb	sy
 800230e:	f3bf 8f4f 	dsb	sy
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	e7fe      	b.n	8002314 <xTaskIncrementTick+0x44>
 8002316:	4b44      	ldr	r3, [pc, #272]	; (8002428 <xTaskIncrementTick+0x158>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	4b43      	ldr	r3, [pc, #268]	; (800242c <xTaskIncrementTick+0x15c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a41      	ldr	r2, [pc, #260]	; (8002428 <xTaskIncrementTick+0x158>)
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4a41      	ldr	r2, [pc, #260]	; (800242c <xTaskIncrementTick+0x15c>)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <xTaskIncrementTick+0x160>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	4a3f      	ldr	r2, [pc, #252]	; (8002430 <xTaskIncrementTick+0x160>)
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	f000 faca 	bl	80028cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002338:	4b3e      	ldr	r3, [pc, #248]	; (8002434 <xTaskIncrementTick+0x164>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	429a      	cmp	r2, r3
 8002340:	d34e      	bcc.n	80023e0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002342:	4b39      	ldr	r3, [pc, #228]	; (8002428 <xTaskIncrementTick+0x158>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <xTaskIncrementTick+0x80>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <xTaskIncrementTick+0x82>
 8002350:	2300      	movs	r3, #0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d004      	beq.n	8002360 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002356:	4b37      	ldr	r3, [pc, #220]	; (8002434 <xTaskIncrementTick+0x164>)
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	601a      	str	r2, [r3, #0]
					break;
 800235e:	e03f      	b.n	80023e0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <xTaskIncrementTick+0x158>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	429a      	cmp	r2, r3
 8002376:	d203      	bcs.n	8002380 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002378:	4a2e      	ldr	r2, [pc, #184]	; (8002434 <xTaskIncrementTick+0x164>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
						break;
 800237e:	e02f      	b.n	80023e0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	3304      	adds	r3, #4
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe ffcf 	bl	8001328 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	2b00      	cmp	r3, #0
 8002390:	d004      	beq.n	800239c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3318      	adds	r3, #24
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe ffc6 	bl	8001328 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <xTaskIncrementTick+0x168>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d903      	bls.n	80023b0 <xTaskIncrementTick+0xe0>
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	4a22      	ldr	r2, [pc, #136]	; (8002438 <xTaskIncrementTick+0x168>)
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4a1f      	ldr	r2, [pc, #124]	; (800243c <xTaskIncrementTick+0x16c>)
 80023be:	441a      	add	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	3304      	adds	r3, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	4610      	mov	r0, r2
 80023c8:	f7fe ff51 	bl	800126e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <xTaskIncrementTick+0x170>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d3b3      	bcc.n	8002342 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80023da:	2301      	movs	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023de:	e7b0      	b.n	8002342 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <xTaskIncrementTick+0x170>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e6:	4915      	ldr	r1, [pc, #84]	; (800243c <xTaskIncrementTick+0x16c>)
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d907      	bls.n	8002408 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80023f8:	2301      	movs	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e004      	b.n	8002408 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <xTaskIncrementTick+0x174>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <xTaskIncrementTick+0x174>)
 8002406:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <xTaskIncrementTick+0x178>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002410:	2301      	movs	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002414:	697b      	ldr	r3, [r7, #20]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000bd4 	.word	0x20000bd4
 8002424:	20000bb0 	.word	0x20000bb0
 8002428:	20000b64 	.word	0x20000b64
 800242c:	20000b68 	.word	0x20000b68
 8002430:	20000bc4 	.word	0x20000bc4
 8002434:	20000bcc 	.word	0x20000bcc
 8002438:	20000bb4 	.word	0x20000bb4
 800243c:	200006dc 	.word	0x200006dc
 8002440:	200006d8 	.word	0x200006d8
 8002444:	20000bbc 	.word	0x20000bbc
 8002448:	20000bc0 	.word	0x20000bc0

0800244c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002452:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <vTaskSwitchContext+0xa4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <vTaskSwitchContext+0xa8>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002460:	e040      	b.n	80024e4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <vTaskSwitchContext+0xa8>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002468:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <vTaskSwitchContext+0xac>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	e00f      	b.n	8002490 <vTaskSwitchContext+0x44>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <vTaskSwitchContext+0x3e>
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	e7fe      	b.n	8002488 <vTaskSwitchContext+0x3c>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3b01      	subs	r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	491a      	ldr	r1, [pc, #104]	; (80024fc <vTaskSwitchContext+0xb0>)
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0e5      	beq.n	8002470 <vTaskSwitchContext+0x24>
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4a13      	ldr	r2, [pc, #76]	; (80024fc <vTaskSwitchContext+0xb0>)
 80024b0:	4413      	add	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3308      	adds	r3, #8
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d104      	bne.n	80024d4 <vTaskSwitchContext+0x88>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <vTaskSwitchContext+0xb4>)
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <vTaskSwitchContext+0xac>)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	20000bd4 	.word	0x20000bd4
 80024f4:	20000bc0 	.word	0x20000bc0
 80024f8:	20000bb4 	.word	0x20000bb4
 80024fc:	200006dc 	.word	0x200006dc
 8002500:	200006d8 	.word	0x200006d8

08002504 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <vTaskPlaceOnEventList+0x24>
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e7fe      	b.n	8002526 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <vTaskPlaceOnEventList+0x44>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3318      	adds	r3, #24
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7fe fec0 	bl	80012b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002536:	2101      	movs	r1, #1
 8002538:	6838      	ldr	r0, [r7, #0]
 800253a:	f000 fa77 	bl	8002a2c <prvAddCurrentTaskToDelayedList>
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200006d8 	.word	0x200006d8

0800254c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <vTaskPlaceOnEventListRestricted+0x26>
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e7fe      	b.n	8002570 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <vTaskPlaceOnEventListRestricted+0x50>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3318      	adds	r3, #24
 8002578:	4619      	mov	r1, r3
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7fe fe77 	bl	800126e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	68b8      	ldr	r0, [r7, #8]
 8002590:	f000 fa4c 	bl	8002a2c <prvAddCurrentTaskToDelayedList>
	}
 8002594:	bf00      	nop
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200006d8 	.word	0x200006d8

080025a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <xTaskRemoveFromEventList+0x2a>
 80025b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	e7fe      	b.n	80025c8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	3318      	adds	r3, #24
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe feaa 	bl	8001328 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <xTaskRemoveFromEventList+0xac>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d11d      	bne.n	8002618 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	3304      	adds	r3, #4
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fea1 	bl	8001328 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <xTaskRemoveFromEventList+0xb0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d903      	bls.n	80025fa <xTaskRemoveFromEventList+0x5a>
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	4a16      	ldr	r2, [pc, #88]	; (8002650 <xTaskRemoveFromEventList+0xb0>)
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4a13      	ldr	r2, [pc, #76]	; (8002654 <xTaskRemoveFromEventList+0xb4>)
 8002608:	441a      	add	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	3304      	adds	r3, #4
 800260e:	4619      	mov	r1, r3
 8002610:	4610      	mov	r0, r2
 8002612:	f7fe fe2c 	bl	800126e <vListInsertEnd>
 8002616:	e005      	b.n	8002624 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	3318      	adds	r3, #24
 800261c:	4619      	mov	r1, r3
 800261e:	480e      	ldr	r0, [pc, #56]	; (8002658 <xTaskRemoveFromEventList+0xb8>)
 8002620:	f7fe fe25 	bl	800126e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <xTaskRemoveFromEventList+0xbc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	429a      	cmp	r2, r3
 8002630:	d905      	bls.n	800263e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002632:	2301      	movs	r3, #1
 8002634:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <xTaskRemoveFromEventList+0xc0>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e001      	b.n	8002642 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002642:	697b      	ldr	r3, [r7, #20]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000bd4 	.word	0x20000bd4
 8002650:	20000bb4 	.word	0x20000bb4
 8002654:	200006dc 	.word	0x200006dc
 8002658:	20000b6c 	.word	0x20000b6c
 800265c:	200006d8 	.word	0x200006d8
 8002660:	20000bc0 	.word	0x20000bc0

08002664 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <vTaskInternalSetTimeOutState+0x24>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <vTaskInternalSetTimeOutState+0x28>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	605a      	str	r2, [r3, #4]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	20000bc4 	.word	0x20000bc4
 800268c:	20000bb0 	.word	0x20000bb0

08002690 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d109      	bne.n	80026b4 <xTaskCheckForTimeOut+0x24>
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	e7fe      	b.n	80026b2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <xTaskCheckForTimeOut+0x3e>
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	e7fe      	b.n	80026cc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80026ce:	f000 fe15 	bl	80032fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <xTaskCheckForTimeOut+0xb8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ea:	d102      	bne.n	80026f2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	e023      	b.n	800273a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <xTaskCheckForTimeOut+0xbc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d007      	beq.n	800270e <xTaskCheckForTimeOut+0x7e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002708:	2301      	movs	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	e015      	b.n	800273a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	429a      	cmp	r2, r3
 8002716:	d20b      	bcs.n	8002730 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	1ad2      	subs	r2, r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff9d 	bl	8002664 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e004      	b.n	800273a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002736:	2301      	movs	r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800273a:	f000 fe0d 	bl	8003358 <vPortExitCritical>

	return xReturn;
 800273e:	69fb      	ldr	r3, [r7, #28]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000bb0 	.word	0x20000bb0
 800274c:	20000bc4 	.word	0x20000bc4

08002750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <vTaskMissedYield+0x14>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	20000bc0 	.word	0x20000bc0

08002768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002770:	f000 f852 	bl	8002818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <prvIdleTask+0x28>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d9f9      	bls.n	8002770 <prvIdleTask+0x8>
			{
				taskYIELD();
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <prvIdleTask+0x2c>)
 800277e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800278c:	e7f0      	b.n	8002770 <prvIdleTask+0x8>
 800278e:	bf00      	nop
 8002790:	200006dc 	.word	0x200006dc
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	e00c      	b.n	80027be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <prvInitialiseTaskLists+0x60>)
 80027b0:	4413      	add	r3, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fd2e 	bl	8001214 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3301      	adds	r3, #1
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b37      	cmp	r3, #55	; 0x37
 80027c2:	d9ef      	bls.n	80027a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80027c4:	480d      	ldr	r0, [pc, #52]	; (80027fc <prvInitialiseTaskLists+0x64>)
 80027c6:	f7fe fd25 	bl	8001214 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80027ca:	480d      	ldr	r0, [pc, #52]	; (8002800 <prvInitialiseTaskLists+0x68>)
 80027cc:	f7fe fd22 	bl	8001214 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80027d0:	480c      	ldr	r0, [pc, #48]	; (8002804 <prvInitialiseTaskLists+0x6c>)
 80027d2:	f7fe fd1f 	bl	8001214 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80027d6:	480c      	ldr	r0, [pc, #48]	; (8002808 <prvInitialiseTaskLists+0x70>)
 80027d8:	f7fe fd1c 	bl	8001214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80027dc:	480b      	ldr	r0, [pc, #44]	; (800280c <prvInitialiseTaskLists+0x74>)
 80027de:	f7fe fd19 	bl	8001214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <prvInitialiseTaskLists+0x78>)
 80027e4:	4a05      	ldr	r2, [pc, #20]	; (80027fc <prvInitialiseTaskLists+0x64>)
 80027e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <prvInitialiseTaskLists+0x7c>)
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <prvInitialiseTaskLists+0x68>)
 80027ec:	601a      	str	r2, [r3, #0]
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200006dc 	.word	0x200006dc
 80027fc:	20000b3c 	.word	0x20000b3c
 8002800:	20000b50 	.word	0x20000b50
 8002804:	20000b6c 	.word	0x20000b6c
 8002808:	20000b80 	.word	0x20000b80
 800280c:	20000b98 	.word	0x20000b98
 8002810:	20000b64 	.word	0x20000b64
 8002814:	20000b68 	.word	0x20000b68

08002818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800281e:	e019      	b.n	8002854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002820:	f000 fd6c 	bl	80032fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <prvCheckTasksWaitingTermination+0x4c>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fd79 	bl	8001328 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <prvCheckTasksWaitingTermination+0x50>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3b01      	subs	r3, #1
 800283c:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <prvCheckTasksWaitingTermination+0x50>)
 800283e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <prvCheckTasksWaitingTermination+0x54>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3b01      	subs	r3, #1
 8002846:	4a09      	ldr	r2, [pc, #36]	; (800286c <prvCheckTasksWaitingTermination+0x54>)
 8002848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800284a:	f000 fd85 	bl	8003358 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f80e 	bl	8002870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <prvCheckTasksWaitingTermination+0x54>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e1      	bne.n	8002820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000b80 	.word	0x20000b80
 8002868:	20000bac 	.word	0x20000bac
 800286c:	20000b94 	.word	0x20000b94

08002870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800287e:	2b00      	cmp	r3, #0
 8002880:	d108      	bne.n	8002894 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fef4 	bl	8003674 <vPortFree>
				vPortFree( pxTCB );
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fef1 	bl	8003674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002892:	e017      	b.n	80028c4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800289a:	2b01      	cmp	r3, #1
 800289c:	d103      	bne.n	80028a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fee8 	bl	8003674 <vPortFree>
	}
 80028a4:	e00e      	b.n	80028c4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d009      	beq.n	80028c4 <prvDeleteTCB+0x54>
 80028b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e7fe      	b.n	80028c2 <prvDeleteTCB+0x52>
	}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <prvResetNextTaskUnblockTime+0x44>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <prvResetNextTaskUnblockTime+0x14>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <prvResetNextTaskUnblockTime+0x16>
 80028e0:	2300      	movs	r3, #0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d004      	beq.n	80028f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <prvResetNextTaskUnblockTime+0x48>)
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80028ee:	e008      	b.n	8002902 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <prvResetNextTaskUnblockTime+0x44>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <prvResetNextTaskUnblockTime+0x48>)
 8002900:	6013      	str	r3, [r2, #0]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000b64 	.word	0x20000b64
 8002914:	20000bcc 	.word	0x20000bcc

08002918 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <xTaskGetSchedulerState+0x34>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002926:	2301      	movs	r3, #1
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	e008      	b.n	800293e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <xTaskGetSchedulerState+0x38>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002934:	2302      	movs	r3, #2
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	e001      	b.n	800293e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800293e:	687b      	ldr	r3, [r7, #4]
	}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	20000bb8 	.word	0x20000bb8
 8002950:	20000bd4 	.word	0x20000bd4

08002954 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d054      	beq.n	8002a14 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800296a:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <xTaskPriorityDisinherit+0xcc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	429a      	cmp	r2, r3
 8002972:	d009      	beq.n	8002988 <xTaskPriorityDisinherit+0x34>
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e7fe      	b.n	8002986 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <xTaskPriorityDisinherit+0x50>
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	e7fe      	b.n	80029a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d02c      	beq.n	8002a14 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d128      	bne.n	8002a14 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	3304      	adds	r3, #4
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fcae 	bl	8001328 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <xTaskPriorityDisinherit+0xd0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d903      	bls.n	80029f4 <xTaskPriorityDisinherit+0xa0>
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <xTaskPriorityDisinherit+0xd0>)
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <xTaskPriorityDisinherit+0xd4>)
 8002a02:	441a      	add	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	3304      	adds	r3, #4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f7fe fc2f 	bl	800126e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002a14:	697b      	ldr	r3, [r7, #20]
	}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200006d8 	.word	0x200006d8
 8002a24:	20000bb4 	.word	0x20000bb4
 8002a28:	200006dc 	.word	0x200006dc

08002a2c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a36:	4b21      	ldr	r3, [pc, #132]	; (8002abc <prvAddCurrentTaskToDelayedList+0x90>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3304      	adds	r3, #4
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fc70 	bl	8001328 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d10a      	bne.n	8002a66 <prvAddCurrentTaskToDelayedList+0x3a>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4819      	ldr	r0, [pc, #100]	; (8002ac4 <prvAddCurrentTaskToDelayedList+0x98>)
 8002a60:	f7fe fc05 	bl	800126e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a64:	e026      	b.n	8002ab4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d209      	bcs.n	8002a92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3304      	adds	r3, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f7fe fc13 	bl	80012b6 <vListInsert>
}
 8002a90:	e010      	b.n	8002ab4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <prvAddCurrentTaskToDelayedList+0xa0>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	f7fe fc09 	bl	80012b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d202      	bcs.n	8002ab4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000bb0 	.word	0x20000bb0
 8002ac0:	200006d8 	.word	0x200006d8
 8002ac4:	20000b98 	.word	0x20000b98
 8002ac8:	20000b68 	.word	0x20000b68
 8002acc:	20000b64 	.word	0x20000b64
 8002ad0:	20000bcc 	.word	0x20000bcc

08002ad4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002ade:	f000 faa9 	bl	8003034 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <xTimerCreateTimerTask+0x80>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d021      	beq.n	8002b2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002af2:	1d3a      	adds	r2, r7, #4
 8002af4:	f107 0108 	add.w	r1, r7, #8
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fb6f 	bl	80011e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	9202      	str	r2, [sp, #8]
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2300      	movs	r3, #0
 8002b12:	460a      	mov	r2, r1
 8002b14:	4910      	ldr	r1, [pc, #64]	; (8002b58 <xTimerCreateTimerTask+0x84>)
 8002b16:	4811      	ldr	r0, [pc, #68]	; (8002b5c <xTimerCreateTimerTask+0x88>)
 8002b18:	f7ff f900 	bl	8001d1c <xTaskCreateStatic>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <xTimerCreateTimerTask+0x8c>)
 8002b20:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <xTimerCreateTimerTask+0x8c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <xTimerCreateTimerTask+0x74>
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	e7fe      	b.n	8002b46 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8002b48:	697b      	ldr	r3, [r7, #20]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000c08 	.word	0x20000c08
 8002b58:	08003bb8 	.word	0x08003bb8
 8002b5c:	08002c7d 	.word	0x08002c7d
 8002b60:	20000c0c 	.word	0x20000c0c

08002b64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <xTimerGenericCommand+0x2c>
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	623b      	str	r3, [r7, #32]
 8002b8e:	e7fe      	b.n	8002b8e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002b90:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <xTimerGenericCommand+0x94>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d02a      	beq.n	8002bee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	dc18      	bgt.n	8002bdc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002baa:	f7ff feb5 	bl	8002918 <xTaskGetSchedulerState>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d109      	bne.n	8002bc8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <xTimerGenericCommand+0x94>)
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	f107 0114 	add.w	r1, r7, #20
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc0:	f7fe fcd6 	bl	8001570 <xQueueGenericSend>
 8002bc4:	6278      	str	r0, [r7, #36]	; 0x24
 8002bc6:	e012      	b.n	8002bee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <xTimerGenericCommand+0x94>)
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	f107 0114 	add.w	r1, r7, #20
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f7fe fccc 	bl	8001570 <xQueueGenericSend>
 8002bd8:	6278      	str	r0, [r7, #36]	; 0x24
 8002bda:	e008      	b.n	8002bee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <xTimerGenericCommand+0x94>)
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	f107 0114 	add.w	r1, r7, #20
 8002be4:	2300      	movs	r3, #0
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	f7fe fdbc 	bl	8001764 <xQueueGenericSendFromISR>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000c08 	.word	0x20000c08

08002bfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <prvProcessExpiredTimer+0x7c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3304      	adds	r3, #4
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe fb87 	bl	8001328 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d121      	bne.n	8002c66 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	18d1      	adds	r1, r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	f000 f8c8 	bl	8002dc4 <prvInsertTimerInActiveList>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d015      	beq.n	8002c66 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	2100      	movs	r1, #0
 8002c44:	6978      	ldr	r0, [r7, #20]
 8002c46:	f7ff ff8d 	bl	8002b64 <xTimerGenericCommand>
 8002c4a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <prvProcessExpiredTimer+0x6a>
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e7fe      	b.n	8002c64 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	4798      	blx	r3
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000c00 	.word	0x20000c00

08002c7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c84:	f107 0308 	add.w	r3, r7, #8
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f857 	bl	8002d3c <prvGetNextExpireTime>
 8002c8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4619      	mov	r1, r3
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f803 	bl	8002ca0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002c9a:	f000 f8d5 	bl	8002e48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c9e:	e7f1      	b.n	8002c84 <prvTimerTask+0x8>

08002ca0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002caa:	f7ff fa57 	bl	800215c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002cae:	f107 0308 	add.w	r3, r7, #8
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f866 	bl	8002d84 <prvSampleTimeNow>
 8002cb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d130      	bne.n	8002d22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10a      	bne.n	8002cdc <prvProcessTimerOrBlockTask+0x3c>
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d806      	bhi.n	8002cdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002cce:	f7ff fa53 	bl	8002178 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002cd2:	68f9      	ldr	r1, [r7, #12]
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ff91 	bl	8002bfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002cda:	e024      	b.n	8002d26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002ce2:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <prvProcessTimerOrBlockTask+0x90>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <prvProcessTimerOrBlockTask+0x94>)
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7fe ffd7 	bl	8001cb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002d06:	f7ff fa37 	bl	8002178 <xTaskResumeAll>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <prvProcessTimerOrBlockTask+0x98>)
 8002d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	f3bf 8f6f 	isb	sy
}
 8002d20:	e001      	b.n	8002d26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002d22:	f7ff fa29 	bl	8002178 <xTaskResumeAll>
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000c04 	.word	0x20000c04
 8002d34:	20000c08 	.word	0x20000c08
 8002d38:	e000ed04 	.word	0xe000ed04

08002d3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <prvGetNextExpireTime+0x44>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bf0c      	ite	eq
 8002d4e:	2301      	moveq	r3, #1
 8002d50:	2300      	movne	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <prvGetNextExpireTime+0x44>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e001      	b.n	8002d72 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	20000c00 	.word	0x20000c00

08002d84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002d8c:	f7ff fa90 	bl	80022b0 <xTaskGetTickCount>
 8002d90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <prvSampleTimeNow+0x3c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d205      	bcs.n	8002da8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002d9c:	f000 f8ea 	bl	8002f74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e002      	b.n	8002dae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002dae:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <prvSampleTimeNow+0x3c>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002db4:	68fb      	ldr	r3, [r7, #12]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000c10 	.word	0x20000c10

08002dc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d812      	bhi.n	8002e10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	1ad2      	subs	r2, r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d302      	bcc.n	8002dfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e01b      	b.n	8002e36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <prvInsertTimerInActiveList+0x7c>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3304      	adds	r3, #4
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f7fe fa54 	bl	80012b6 <vListInsert>
 8002e0e:	e012      	b.n	8002e36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d206      	bcs.n	8002e26 <prvInsertTimerInActiveList+0x62>
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d302      	bcc.n	8002e26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002e20:	2301      	movs	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e007      	b.n	8002e36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <prvInsertTimerInActiveList+0x80>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4610      	mov	r0, r2
 8002e32:	f7fe fa40 	bl	80012b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002e36:	697b      	ldr	r3, [r7, #20]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000c04 	.word	0x20000c04
 8002e44:	20000c00 	.word	0x20000c00

08002e48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08c      	sub	sp, #48	; 0x30
 8002e4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e4e:	e07f      	b.n	8002f50 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	db7b      	blt.n	8002f4e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	3304      	adds	r3, #4
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fa5e 	bl	8001328 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff88 	bl	8002d84 <prvSampleTimeNow>
 8002e74:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b09      	cmp	r3, #9
 8002e7a:	d869      	bhi.n	8002f50 <prvProcessReceivedCommands+0x108>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <prvProcessReceivedCommands+0x3c>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002ead 	.word	0x08002ead
 8002e88:	08002ead 	.word	0x08002ead
 8002e8c:	08002ead 	.word	0x08002ead
 8002e90:	08002f51 	.word	0x08002f51
 8002e94:	08002f07 	.word	0x08002f07
 8002e98:	08002f3d 	.word	0x08002f3d
 8002e9c:	08002ead 	.word	0x08002ead
 8002ea0:	08002ead 	.word	0x08002ead
 8002ea4:	08002f51 	.word	0x08002f51
 8002ea8:	08002f07 	.word	0x08002f07
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	18d1      	adds	r1, r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a3a      	ldr	r2, [r7, #32]
 8002eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eba:	f7ff ff83 	bl	8002dc4 <prvInsertTimerInActiveList>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d045      	beq.n	8002f50 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d13d      	bne.n	8002f50 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	441a      	add	r2, r3
 8002edc:	2300      	movs	r3, #0
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ee6:	f7ff fe3d 	bl	8002b64 <xTimerGenericCommand>
 8002eea:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d12e      	bne.n	8002f50 <prvProcessReceivedCommands+0x108>
 8002ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e7fe      	b.n	8002f04 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <prvProcessReceivedCommands+0xe0>
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e7fe      	b.n	8002f26 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	18d1      	adds	r1, r2, r3
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	6a3a      	ldr	r2, [r7, #32]
 8002f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f36:	f7ff ff45 	bl	8002dc4 <prvInsertTimerInActiveList>
					break;
 8002f3a:	e009      	b.n	8002f50 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d104      	bne.n	8002f50 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8002f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f48:	f000 fb94 	bl	8003674 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002f4c:	e000      	b.n	8002f50 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002f4e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <prvProcessReceivedCommands+0x128>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f107 0108 	add.w	r1, r7, #8
 8002f58:	2200      	movs	r2, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fc96 	bl	800188c <xQueueReceive>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f47f af74 	bne.w	8002e50 <prvProcessReceivedCommands+0x8>
	}
}
 8002f68:	bf00      	nop
 8002f6a:	3728      	adds	r7, #40	; 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000c08 	.word	0x20000c08

08002f74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f7a:	e044      	b.n	8003006 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <prvSwitchTimerLists+0xb8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f86:	4b29      	ldr	r3, [pc, #164]	; (800302c <prvSwitchTimerLists+0xb8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe f9c7 	bl	8001328 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d12d      	bne.n	8003006 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d90e      	bls.n	8002fda <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <prvSwitchTimerLists+0xb8>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7fe f96f 	bl	80012b6 <vListInsert>
 8002fd8:	e015      	b.n	8003006 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7ff fdbd 	bl	8002b64 <xTimerGenericCommand>
 8002fea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <prvSwitchTimerLists+0x92>
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	e7fe      	b.n	8003004 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <prvSwitchTimerLists+0xb8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1b5      	bne.n	8002f7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <prvSwitchTimerLists+0xb8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <prvSwitchTimerLists+0xbc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <prvSwitchTimerLists+0xb8>)
 800301c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800301e:	4a04      	ldr	r2, [pc, #16]	; (8003030 <prvSwitchTimerLists+0xbc>)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000c00 	.word	0x20000c00
 8003030:	20000c04 	.word	0x20000c04

08003034 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800303a:	f000 f95f 	bl	80032fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <prvCheckForValidListAndQueue+0x60>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d120      	bne.n	8003088 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003046:	4814      	ldr	r0, [pc, #80]	; (8003098 <prvCheckForValidListAndQueue+0x64>)
 8003048:	f7fe f8e4 	bl	8001214 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800304c:	4813      	ldr	r0, [pc, #76]	; (800309c <prvCheckForValidListAndQueue+0x68>)
 800304e:	f7fe f8e1 	bl	8001214 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <prvCheckForValidListAndQueue+0x6c>)
 8003054:	4a10      	ldr	r2, [pc, #64]	; (8003098 <prvCheckForValidListAndQueue+0x64>)
 8003056:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <prvCheckForValidListAndQueue+0x70>)
 800305a:	4a10      	ldr	r2, [pc, #64]	; (800309c <prvCheckForValidListAndQueue+0x68>)
 800305c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800305e:	2300      	movs	r3, #0
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <prvCheckForValidListAndQueue+0x74>)
 8003064:	4a11      	ldr	r2, [pc, #68]	; (80030ac <prvCheckForValidListAndQueue+0x78>)
 8003066:	210c      	movs	r1, #12
 8003068:	200a      	movs	r0, #10
 800306a:	f7fe f9ef 	bl	800144c <xQueueGenericCreateStatic>
 800306e:	4602      	mov	r2, r0
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <prvCheckForValidListAndQueue+0x60>)
 8003072:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <prvCheckForValidListAndQueue+0x60>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <prvCheckForValidListAndQueue+0x60>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	490b      	ldr	r1, [pc, #44]	; (80030b0 <prvCheckForValidListAndQueue+0x7c>)
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fdee 	bl	8001c64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003088:	f000 f966 	bl	8003358 <vPortExitCritical>
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000c08 	.word	0x20000c08
 8003098:	20000bd8 	.word	0x20000bd8
 800309c:	20000bec 	.word	0x20000bec
 80030a0:	20000c00 	.word	0x20000c00
 80030a4:	20000c04 	.word	0x20000c04
 80030a8:	20000c8c 	.word	0x20000c8c
 80030ac:	20000c14 	.word	0x20000c14
 80030b0:	08003bc0 	.word	0x08003bc0

080030b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3b04      	subs	r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3b04      	subs	r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f023 0201 	bic.w	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3b04      	subs	r3, #4
 80030e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030e4:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <pxPortInitialiseStack+0x64>)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3b14      	subs	r3, #20
 80030ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3b04      	subs	r3, #4
 80030fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f06f 0202 	mvn.w	r2, #2
 8003102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3b20      	subs	r3, #32
 8003108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	0800311d 	.word	0x0800311d

0800311c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <prvTaskExitError+0x50>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312e:	d009      	beq.n	8003144 <prvTaskExitError+0x28>
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e7fe      	b.n	8003142 <prvTaskExitError+0x26>
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003156:	bf00      	nop
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0fc      	beq.n	8003158 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000008 	.word	0x20000008

08003170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <pxCurrentTCBConst2>)
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	6808      	ldr	r0, [r1, #0]
 8003176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800317a:	f380 8809 	msr	PSP, r0
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f380 8811 	msr	BASEPRI, r0
 800318a:	4770      	bx	lr
 800318c:	f3af 8000 	nop.w

08003190 <pxCurrentTCBConst2>:
 8003190:	200006d8 	.word	0x200006d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop

08003198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003198:	4808      	ldr	r0, [pc, #32]	; (80031bc <prvPortStartFirstTask+0x24>)
 800319a:	6800      	ldr	r0, [r0, #0]
 800319c:	6800      	ldr	r0, [r0, #0]
 800319e:	f380 8808 	msr	MSP, r0
 80031a2:	f04f 0000 	mov.w	r0, #0
 80031a6:	f380 8814 	msr	CONTROL, r0
 80031aa:	b662      	cpsie	i
 80031ac:	b661      	cpsie	f
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	df00      	svc	0
 80031b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80031ba:	bf00      	nop
 80031bc:	e000ed08 	.word	0xe000ed08

080031c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80031c6:	4b44      	ldr	r3, [pc, #272]	; (80032d8 <xPortStartScheduler+0x118>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a44      	ldr	r2, [pc, #272]	; (80032dc <xPortStartScheduler+0x11c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d109      	bne.n	80031e4 <xPortStartScheduler+0x24>
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	e7fe      	b.n	80031e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031e4:	4b3c      	ldr	r3, [pc, #240]	; (80032d8 <xPortStartScheduler+0x118>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a3d      	ldr	r2, [pc, #244]	; (80032e0 <xPortStartScheduler+0x120>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d109      	bne.n	8003202 <xPortStartScheduler+0x42>
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e7fe      	b.n	8003200 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003202:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <xPortStartScheduler+0x124>)
 8003204:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	22ff      	movs	r2, #255	; 0xff
 8003212:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003224:	b2da      	uxtb	r2, r3
 8003226:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <xPortStartScheduler+0x128>)
 8003228:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800322a:	4b30      	ldr	r3, [pc, #192]	; (80032ec <xPortStartScheduler+0x12c>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003230:	e009      	b.n	8003246 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003232:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <xPortStartScheduler+0x12c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3b01      	subs	r3, #1
 8003238:	4a2c      	ldr	r2, [pc, #176]	; (80032ec <xPortStartScheduler+0x12c>)
 800323a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	2b80      	cmp	r3, #128	; 0x80
 8003250:	d0ef      	beq.n	8003232 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003252:	4b26      	ldr	r3, [pc, #152]	; (80032ec <xPortStartScheduler+0x12c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f1c3 0307 	rsb	r3, r3, #7
 800325a:	2b04      	cmp	r3, #4
 800325c:	d009      	beq.n	8003272 <xPortStartScheduler+0xb2>
 800325e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	e7fe      	b.n	8003270 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <xPortStartScheduler+0x12c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <xPortStartScheduler+0x12c>)
 800327a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <xPortStartScheduler+0x12c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003284:	4a19      	ldr	r2, [pc, #100]	; (80032ec <xPortStartScheduler+0x12c>)
 8003286:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <xPortStartScheduler+0x130>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <xPortStartScheduler+0x130>)
 8003296:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800329a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800329c:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <xPortStartScheduler+0x130>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <xPortStartScheduler+0x130>)
 80032a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80032a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80032a8:	f000 f8b6 	bl	8003418 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <xPortStartScheduler+0x134>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80032b2:	f000 f8d5 	bl	8003460 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <xPortStartScheduler+0x138>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <xPortStartScheduler+0x138>)
 80032bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80032c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80032c2:	f7ff ff69 	bl	8003198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80032c6:	f7ff f8c1 	bl	800244c <vTaskSwitchContext>
	prvTaskExitError();
 80032ca:	f7ff ff27 	bl	800311c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	e000ed00 	.word	0xe000ed00
 80032dc:	410fc271 	.word	0x410fc271
 80032e0:	410fc270 	.word	0x410fc270
 80032e4:	e000e400 	.word	0xe000e400
 80032e8:	20000cd4 	.word	0x20000cd4
 80032ec:	20000cd8 	.word	0x20000cd8
 80032f0:	e000ed20 	.word	0xe000ed20
 80032f4:	20000008 	.word	0x20000008
 80032f8:	e000ef34 	.word	0xe000ef34

080032fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003314:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <vPortEnterCritical+0x54>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	4a0d      	ldr	r2, [pc, #52]	; (8003350 <vPortEnterCritical+0x54>)
 800331c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <vPortEnterCritical+0x54>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d10e      	bne.n	8003344 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <vPortEnterCritical+0x58>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d009      	beq.n	8003344 <vPortEnterCritical+0x48>
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	e7fe      	b.n	8003342 <vPortEnterCritical+0x46>
	}
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	20000008 	.word	0x20000008
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <vPortExitCritical+0x4c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <vPortExitCritical+0x22>
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	e7fe      	b.n	8003378 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <vPortExitCritical+0x4c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3b01      	subs	r3, #1
 8003380:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <vPortExitCritical+0x4c>)
 8003382:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003384:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <vPortExitCritical+0x4c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <vPortExitCritical+0x3e>
 800338c:	2300      	movs	r3, #0
 800338e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000008 	.word	0x20000008
	...

080033b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80033b0:	f3ef 8009 	mrs	r0, PSP
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	4b15      	ldr	r3, [pc, #84]	; (8003410 <pxCurrentTCBConst>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	f01e 0f10 	tst.w	lr, #16
 80033c0:	bf08      	it	eq
 80033c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80033c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ca:	6010      	str	r0, [r2, #0]
 80033cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80033d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80033d4:	f380 8811 	msr	BASEPRI, r0
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f7ff f834 	bl	800244c <vTaskSwitchContext>
 80033e4:	f04f 0000 	mov.w	r0, #0
 80033e8:	f380 8811 	msr	BASEPRI, r0
 80033ec:	bc09      	pop	{r0, r3}
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	6808      	ldr	r0, [r1, #0]
 80033f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f6:	f01e 0f10 	tst.w	lr, #16
 80033fa:	bf08      	it	eq
 80033fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003400:	f380 8809 	msr	PSP, r0
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	f3af 8000 	nop.w

08003410 <pxCurrentTCBConst>:
 8003410:	200006d8 	.word	0x200006d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop

08003418 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <vPortSetupTimerInterrupt+0x34>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <vPortSetupTimerInterrupt+0x38>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003428:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <vPortSetupTimerInterrupt+0x3c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <vPortSetupTimerInterrupt+0x40>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <vPortSetupTimerInterrupt+0x44>)
 8003436:	3b01      	subs	r3, #1
 8003438:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <vPortSetupTimerInterrupt+0x34>)
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000e010 	.word	0xe000e010
 8003450:	e000e018 	.word	0xe000e018
 8003454:	2000000c 	.word	0x2000000c
 8003458:	10624dd3 	.word	0x10624dd3
 800345c:	e000e014 	.word	0xe000e014

08003460 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003460:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003470 <vPortEnableVFP+0x10>
 8003464:	6801      	ldr	r1, [r0, #0]
 8003466:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800346a:	6001      	str	r1, [r0, #0]
 800346c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800346e:	bf00      	nop
 8003470:	e000ed88 	.word	0xe000ed88

08003474 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800347a:	f3ef 8305 	mrs	r3, IPSR
 800347e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b0f      	cmp	r3, #15
 8003484:	d913      	bls.n	80034ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003486:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <vPortValidateInterruptPriority+0x6c>)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <vPortValidateInterruptPriority+0x70>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	7afa      	ldrb	r2, [r7, #11]
 8003496:	429a      	cmp	r2, r3
 8003498:	d209      	bcs.n	80034ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	e7fe      	b.n	80034ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <vPortValidateInterruptPriority+0x74>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <vPortValidateInterruptPriority+0x78>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d909      	bls.n	80034d2 <vPortValidateInterruptPriority+0x5e>
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	e7fe      	b.n	80034d0 <vPortValidateInterruptPriority+0x5c>
	}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000e3f0 	.word	0xe000e3f0
 80034e4:	20000cd4 	.word	0x20000cd4
 80034e8:	e000ed0c 	.word	0xe000ed0c
 80034ec:	20000cd8 	.word	0x20000cd8

080034f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80034fc:	f7fe fe2e 	bl	800215c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003500:	4b57      	ldr	r3, [pc, #348]	; (8003660 <pvPortMalloc+0x170>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003508:	f000 f90c 	bl	8003724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800350c:	4b55      	ldr	r3, [pc, #340]	; (8003664 <pvPortMalloc+0x174>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	f040 808c 	bne.w	8003632 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01c      	beq.n	800355a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003520:	2208      	movs	r2, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	2b00      	cmp	r3, #0
 8003530:	d013      	beq.n	800355a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f023 0307 	bic.w	r3, r3, #7
 8003538:	3308      	adds	r3, #8
 800353a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <pvPortMalloc+0x6a>
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	e7fe      	b.n	8003558 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d068      	beq.n	8003632 <pvPortMalloc+0x142>
 8003560:	4b41      	ldr	r3, [pc, #260]	; (8003668 <pvPortMalloc+0x178>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	429a      	cmp	r2, r3
 8003568:	d863      	bhi.n	8003632 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800356a:	4b40      	ldr	r3, [pc, #256]	; (800366c <pvPortMalloc+0x17c>)
 800356c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800356e:	4b3f      	ldr	r3, [pc, #252]	; (800366c <pvPortMalloc+0x17c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003574:	e004      	b.n	8003580 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	429a      	cmp	r2, r3
 8003588:	d903      	bls.n	8003592 <pvPortMalloc+0xa2>
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f1      	bne.n	8003576 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003592:	4b33      	ldr	r3, [pc, #204]	; (8003660 <pvPortMalloc+0x170>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003598:	429a      	cmp	r2, r3
 800359a:	d04a      	beq.n	8003632 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2208      	movs	r2, #8
 80035a2:	4413      	add	r3, r2
 80035a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	1ad2      	subs	r2, r2, r3
 80035b6:	2308      	movs	r3, #8
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d91e      	bls.n	80035fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4413      	add	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <pvPortMalloc+0xf4>
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	e7fe      	b.n	80035e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	1ad2      	subs	r2, r2, r3
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80035f6:	69b8      	ldr	r0, [r7, #24]
 80035f8:	f000 f8f6 	bl	80037e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80035fc:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <pvPortMalloc+0x178>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	4a18      	ldr	r2, [pc, #96]	; (8003668 <pvPortMalloc+0x178>)
 8003608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800360a:	4b17      	ldr	r3, [pc, #92]	; (8003668 <pvPortMalloc+0x178>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <pvPortMalloc+0x180>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d203      	bcs.n	800361e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <pvPortMalloc+0x178>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a15      	ldr	r2, [pc, #84]	; (8003670 <pvPortMalloc+0x180>)
 800361c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4b10      	ldr	r3, [pc, #64]	; (8003664 <pvPortMalloc+0x174>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	431a      	orrs	r2, r3
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003632:	f7fe fda1 	bl	8002178 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <pvPortMalloc+0x164>
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e7fe      	b.n	8003652 <pvPortMalloc+0x162>
	return pvReturn;
 8003654:	69fb      	ldr	r3, [r7, #28]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3728      	adds	r7, #40	; 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200048e4 	.word	0x200048e4
 8003664:	200048f0 	.word	0x200048f0
 8003668:	200048e8 	.word	0x200048e8
 800366c:	200048dc 	.word	0x200048dc
 8003670:	200048ec 	.word	0x200048ec

08003674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d046      	beq.n	8003714 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003686:	2308      	movs	r3, #8
 8003688:	425b      	negs	r3, r3
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4413      	add	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <vPortFree+0xa8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <vPortFree+0x42>
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e7fe      	b.n	80036b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <vPortFree+0x5e>
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	e7fe      	b.n	80036d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <vPortFree+0xa8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d019      	beq.n	8003714 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d115      	bne.n	8003714 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <vPortFree+0xa8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	401a      	ands	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80036f8:	f7fe fd30 	bl	800215c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <vPortFree+0xac>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4413      	add	r3, r2
 8003706:	4a06      	ldr	r2, [pc, #24]	; (8003720 <vPortFree+0xac>)
 8003708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800370a:	6938      	ldr	r0, [r7, #16]
 800370c:	f000 f86c 	bl	80037e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003710:	f7fe fd32 	bl	8002178 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003714:	bf00      	nop
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	200048f0 	.word	0x200048f0
 8003720:	200048e8 	.word	0x200048e8

08003724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800372a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800372e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <prvHeapInit+0xac>)
 8003732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3307      	adds	r3, #7
 8003742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0307 	bic.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	4a1f      	ldr	r2, [pc, #124]	; (80037d0 <prvHeapInit+0xac>)
 8003754:	4413      	add	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800375c:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <prvHeapInit+0xb0>)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003762:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <prvHeapInit+0xb0>)
 8003764:	2200      	movs	r2, #0
 8003766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	4413      	add	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003770:	2208      	movs	r2, #8
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0307 	bic.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <prvHeapInit+0xb4>)
 8003784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003786:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <prvHeapInit+0xb4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <prvHeapInit+0xb4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	1ad2      	subs	r2, r2, r3
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <prvHeapInit+0xb4>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <prvHeapInit+0xb8>)
 80037b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <prvHeapInit+0xbc>)
 80037ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <prvHeapInit+0xc0>)
 80037be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037c2:	601a      	str	r2, [r3, #0]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	20000cdc 	.word	0x20000cdc
 80037d4:	200048dc 	.word	0x200048dc
 80037d8:	200048e4 	.word	0x200048e4
 80037dc:	200048ec 	.word	0x200048ec
 80037e0:	200048e8 	.word	0x200048e8
 80037e4:	200048f0 	.word	0x200048f0

080037e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037f0:	4b28      	ldr	r3, [pc, #160]	; (8003894 <prvInsertBlockIntoFreeList+0xac>)
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	e002      	b.n	80037fc <prvInsertBlockIntoFreeList+0x14>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	d8f7      	bhi.n	80037f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	4413      	add	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	d108      	bne.n	800382a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	441a      	add	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	441a      	add	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d118      	bne.n	8003870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <prvInsertBlockIntoFreeList+0xb0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d00d      	beq.n	8003866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	441a      	add	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e008      	b.n	8003878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <prvInsertBlockIntoFreeList+0xb0>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e003      	b.n	8003878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	d002      	beq.n	8003886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	200048dc 	.word	0x200048dc
 8003898:	200048e4 	.word	0x200048e4

0800389c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main (void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init( );
 80038a2:	f7fc fe15 	bl	80004d0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config( );
 80038a6:	f000 f81b 	bl	80038e0 <_Z18SystemClock_Configv>
    /* Initialize all configured peripherals */
    /* USER CODE BEGIN 2 */

    /* USER CODE END 2 */

    osKernelInitialize( );     // Initialize CMSIS-RTOS
 80038aa:	f7fd fb3f 	bl	8000f2c <osKernelInitialize>
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadAttr_t defaultTask_attributes;
    defaultTask_attributes.name = "defaultTask";
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <main+0x38>)
 80038b0:	607b      	str	r3, [r7, #4]
    defaultTask_attributes.stack_size = 128;
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	61bb      	str	r3, [r7, #24]
    defaultTask_attributes.priority =(osPriority_t) osPriorityNormal ;
 80038b6:	2318      	movs	r3, #24
 80038b8:	61fb      	str	r3, [r7, #28]
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	461a      	mov	r2, r3
 80038be:	2100      	movs	r1, #0
 80038c0:	4805      	ldr	r0, [pc, #20]	; (80038d8 <main+0x3c>)
 80038c2:	f7fd fb9b 	bl	8000ffc <osThreadNew>
 80038c6:	4602      	mov	r2, r0
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <main+0x40>)
 80038ca:	601a      	str	r2, [r3, #0]
    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart( );
 80038cc:	f7fd fb62 	bl	8000f94 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 80038d0:	e7fe      	b.n	80038d0 <main+0x34>
 80038d2:	bf00      	nop
 80038d4:	08003bc8 	.word	0x08003bc8
 80038d8:	080039b1 	.word	0x080039b1
 80038dc:	200048f4 	.word	0x200048f4

080038e0 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config (void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b094      	sub	sp, #80	; 0x50
 80038e4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80038e6:	f107 0320 	add.w	r3, r7, #32
 80038ea:	2230      	movs	r2, #48	; 0x30
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f949 	bl	8003b86 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE()
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <_Z18SystemClock_Configv+0xc8>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <_Z18SystemClock_Configv+0xc8>)
 800390e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003912:	6413      	str	r3, [r2, #64]	; 0x40
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <_Z18SystemClock_Configv+0xc8>)
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]
    ;
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003920:	2300      	movs	r3, #0
 8003922:	607b      	str	r3, [r7, #4]
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <_Z18SystemClock_Configv+0xcc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a20      	ldr	r2, [pc, #128]	; (80039ac <_Z18SystemClock_Configv+0xcc>)
 800392a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <_Z18SystemClock_Configv+0xcc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800393c:	2302      	movs	r3, #2
 800393e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003940:	2301      	movs	r3, #1
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003944:	2310      	movs	r3, #16
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003948:	2300      	movs	r3, #0
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800394c:	f107 0320 	add.w	r3, r7, #32
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc ff15 	bl	8000780 <HAL_RCC_OscConfig>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <_Z18SystemClock_Configv+0x8a>
    {
        Error_Handler( );
 8003966:	f000 f82b 	bl	80039c0 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 800396a:	230f      	movs	r3, #15
 800396c:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800397e:	f107 030c 	add.w	r3, r7, #12
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd f93d 	bl	8000c04 <HAL_RCC_ClockConfig>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <_Z18SystemClock_Configv+0xbe>
    {
        Error_Handler( );
 800399a:	f000 f811 	bl	80039c0 <Error_Handler>
    }
}
 800399e:	bf00      	nop
 80039a0:	3750      	adds	r7, #80	; 0x50
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40007000 	.word	0x40007000

080039b0 <_Z16StartDefaultTaskPv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask (void *argument)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;)
    {
        osDelay(1);
 80039b8:	2001      	movs	r0, #1
 80039ba:	f7fd fbc9 	bl	8001150 <osDelay>
 80039be:	e7fb      	b.n	80039b8 <_Z16StartDefaultTaskPv+0x8>

080039c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_MspInit+0x54>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <HAL_MspInit+0x54>)
 80039e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e4:	6453      	str	r3, [r2, #68]	; 0x44
 80039e6:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <HAL_MspInit+0x54>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_MspInit+0x54>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <HAL_MspInit+0x54>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a00:	6413      	str	r3, [r2, #64]	; 0x40
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_MspInit+0x54>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	210f      	movs	r1, #15
 8003a12:	f06f 0001 	mvn.w	r0, #1
 8003a16:	f7fc fe8a 	bl	800072e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800

08003a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <HardFault_Handler+0x4>

08003a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <MemManage_Handler+0x4>

08003a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a46:	e7fe      	b.n	8003a46 <BusFault_Handler+0x4>

08003a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a4c:	e7fe      	b.n	8003a4c <UsageFault_Handler+0x4>

08003a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a60:	f7fc fd88 	bl	8000574 <HAL_IncTick>
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a64:	bf00      	nop
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a6c:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <SystemInit+0x60>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <SystemInit+0x60>)
 8003a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003a7c:	4b13      	ldr	r3, [pc, #76]	; (8003acc <SystemInit+0x64>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a12      	ldr	r2, [pc, #72]	; (8003acc <SystemInit+0x64>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a88:	4b10      	ldr	r3, [pc, #64]	; (8003acc <SystemInit+0x64>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <SystemInit+0x64>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <SystemInit+0x64>)
 8003a94:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <SystemInit+0x64>)
 8003aa0:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <SystemInit+0x68>)
 8003aa2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <SystemInit+0x64>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a08      	ldr	r2, [pc, #32]	; (8003acc <SystemInit+0x64>)
 8003aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <SystemInit+0x64>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ab6:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <SystemInit+0x60>)
 8003ab8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003abc:	609a      	str	r2, [r3, #8]
#endif
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000ed00 	.word	0xe000ed00
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	24003010 	.word	0x24003010

08003ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ada:	e003      	b.n	8003ae4 <LoopCopyDataInit>

08003adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ae2:	3104      	adds	r1, #4

08003ae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ae4:	480b      	ldr	r0, [pc, #44]	; (8003b14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003aec:	d3f6      	bcc.n	8003adc <CopyDataInit>
  ldr  r2, =_sbss
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003af0:	e002      	b.n	8003af8 <LoopFillZerobss>

08003af2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003af2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003af4:	f842 3b04 	str.w	r3, [r2], #4

08003af8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003afc:	d3f9      	bcc.n	8003af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003afe:	f7ff ffb3 	bl	8003a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b02:	f000 f811 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b06:	f7ff fec9 	bl	800389c <main>
  bx  lr    
 8003b0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003b10:	08003bf4 	.word	0x08003bf4
  ldr  r0, =_sdata
 8003b14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b18:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8003b1c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8003b20:	2000493c 	.word	0x2000493c

08003b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b24:	e7fe      	b.n	8003b24 <ADC_IRQHandler>
	...

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4e0d      	ldr	r6, [pc, #52]	; (8003b60 <__libc_init_array+0x38>)
 8003b2c:	4c0d      	ldr	r4, [pc, #52]	; (8003b64 <__libc_init_array+0x3c>)
 8003b2e:	1ba4      	subs	r4, r4, r6
 8003b30:	10a4      	asrs	r4, r4, #2
 8003b32:	2500      	movs	r5, #0
 8003b34:	42a5      	cmp	r5, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	4e0b      	ldr	r6, [pc, #44]	; (8003b68 <__libc_init_array+0x40>)
 8003b3a:	4c0c      	ldr	r4, [pc, #48]	; (8003b6c <__libc_init_array+0x44>)
 8003b3c:	f000 f82c 	bl	8003b98 <_init>
 8003b40:	1ba4      	subs	r4, r4, r6
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	2500      	movs	r5, #0
 8003b46:	42a5      	cmp	r5, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b50:	4798      	blx	r3
 8003b52:	3501      	adds	r5, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b5a:	4798      	blx	r3
 8003b5c:	3501      	adds	r5, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	08003bec 	.word	0x08003bec
 8003b64:	08003bec 	.word	0x08003bec
 8003b68:	08003bec 	.word	0x08003bec
 8003b6c:	08003bf0 	.word	0x08003bf0

08003b70 <memcpy>:
 8003b70:	b510      	push	{r4, lr}
 8003b72:	1e43      	subs	r3, r0, #1
 8003b74:	440a      	add	r2, r1
 8003b76:	4291      	cmp	r1, r2
 8003b78:	d100      	bne.n	8003b7c <memcpy+0xc>
 8003b7a:	bd10      	pop	{r4, pc}
 8003b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b84:	e7f7      	b.n	8003b76 <memcpy+0x6>

08003b86 <memset>:
 8003b86:	4402      	add	r2, r0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d100      	bne.n	8003b90 <memset+0xa>
 8003b8e:	4770      	bx	lr
 8003b90:	f803 1b01 	strb.w	r1, [r3], #1
 8003b94:	e7f9      	b.n	8003b8a <memset+0x4>
	...

08003b98 <_init>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr

08003ba4 <_fini>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	bf00      	nop
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr
